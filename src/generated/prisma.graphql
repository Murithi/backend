# source: https://eu1.prisma.sh/eric-murithi-19fbd7/kewaservice/kewaservicedev
# timestamp: Wed Jul 11 2018 10:24:04 GMT+0300 (EAT)

type AggregateDriver {
  count: Int!
}

type AggregateMaterialRequisition {
  count: Int!
}

type AggregateMaterialsCosting {
  count: Int!
}

type AggregateOtherPaymentIssue {
  count: Int!
}

type AggregatePaymentIssue {
  count: Int!
}

type AggregatePersonnel {
  count: Int!
}

type AggregatePersonnelAttendance {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateProject {
  count: Int!
}

type AggregateRepairsRequisition {
  count: Int!
}

type AggregateRequestService {
  count: Int!
}

type AggregateRole {
  count: Int!
}

type AggregateSection {
  count: Int!
}

type AggregateSectionAssignment {
  count: Int!
}

type AggregateServiceRequisition {
  count: Int!
}

type AggregateStoreBalance {
  count: Int!
}

type AggregateStoreTransaction {
  count: Int!
}

type AggregateSupplier {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AggregateVehicle {
  count: Int!
}

type AggregateVehicleAssignment {
  count: Int!
}

type AggregateVehicleInspection {
  count: Int!
}

type AggregateVehicleOwner {
  count: Int!
}

type AggregateVehicleRequisition {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

type Driver implements Node {
  id: ID!
  personnelDetails(where: PersonnelWhereInput): Personnel
  licenseNumber: String!
  licenseExpiry: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type DriverConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [DriverEdge]!
  aggregate: AggregateDriver!
}

input DriverCreateInput {
  licenseNumber: String!
  licenseExpiry: DateTime!
  personnelDetails: PersonnelCreateOneInput
}

"""An edge in a connection."""
type DriverEdge {
  """The item at the end of the edge."""
  node: Driver!

  """A cursor for use in pagination."""
  cursor: String!
}

enum DriverOrderByInput {
  id_ASC
  id_DESC
  licenseNumber_ASC
  licenseNumber_DESC
  licenseExpiry_ASC
  licenseExpiry_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type DriverPreviousValues {
  id: ID!
  licenseNumber: String!
  licenseExpiry: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DriverSubscriptionPayload {
  mutation: MutationType!
  node: Driver
  updatedFields: [String!]
  previousValues: DriverPreviousValues
}

input DriverSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [DriverSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [DriverSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DriverSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: DriverWhereInput
}

input DriverUpdateInput {
  licenseNumber: String
  licenseExpiry: DateTime
  personnelDetails: PersonnelUpdateOneInput
}

input DriverWhereInput {
  """Logical AND on all given filters."""
  AND: [DriverWhereInput!]

  """Logical OR on all given filters."""
  OR: [DriverWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [DriverWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  licenseNumber: String

  """All values that are not equal to given value."""
  licenseNumber_not: String

  """All values that are contained in given list."""
  licenseNumber_in: [String!]

  """All values that are not contained in given list."""
  licenseNumber_not_in: [String!]

  """All values less than the given value."""
  licenseNumber_lt: String

  """All values less than or equal the given value."""
  licenseNumber_lte: String

  """All values greater than the given value."""
  licenseNumber_gt: String

  """All values greater than or equal the given value."""
  licenseNumber_gte: String

  """All values containing the given string."""
  licenseNumber_contains: String

  """All values not containing the given string."""
  licenseNumber_not_contains: String

  """All values starting with the given string."""
  licenseNumber_starts_with: String

  """All values not starting with the given string."""
  licenseNumber_not_starts_with: String

  """All values ending with the given string."""
  licenseNumber_ends_with: String

  """All values not ending with the given string."""
  licenseNumber_not_ends_with: String
  licenseExpiry: DateTime

  """All values that are not equal to given value."""
  licenseExpiry_not: DateTime

  """All values that are contained in given list."""
  licenseExpiry_in: [DateTime!]

  """All values that are not contained in given list."""
  licenseExpiry_not_in: [DateTime!]

  """All values less than the given value."""
  licenseExpiry_lt: DateTime

  """All values less than or equal the given value."""
  licenseExpiry_lte: DateTime

  """All values greater than the given value."""
  licenseExpiry_gt: DateTime

  """All values greater than or equal the given value."""
  licenseExpiry_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  personnelDetails: PersonnelWhereInput
}

input DriverWhereUniqueInput {
  id: ID
  licenseNumber: String
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type MaterialRequisition implements Node {
  id: ID!
  materialType(where: MaterialsCostingWhereInput): MaterialsCosting!
  quantity: Int!
  proposedSupplier(where: SupplierWhereInput): Supplier!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  requestedBy(where: UserWhereInput): User
  requestApprovedBy(where: UserWhereInput): User
  approvalStatus: Boolean!
  approvalDate: DateTime
  cashPaymentsDetails(where: PaymentIssueWhereInput): PaymentIssue
  otherPaymentDetails(where: OtherPaymentIssueWhereInput): OtherPaymentIssue
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type MaterialRequisitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MaterialRequisitionEdge]!
  aggregate: AggregateMaterialRequisition!
}

input MaterialRequisitionCreateInput {
  quantity: Int!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingCreateOneInput!
  proposedSupplier: SupplierCreateOneInput!
  requestedBy: UserCreateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserCreateOneInput
  cashPaymentsDetails: PaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
  otherPaymentDetails: OtherPaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionCreateManyWithoutRequestedByInput {
  create: [MaterialRequisitionCreateWithoutRequestedByInput!]
  connect: [MaterialRequisitionWhereUniqueInput!]
}

input MaterialRequisitionCreateOneWithoutCashPaymentsDetailsInput {
  create: MaterialRequisitionCreateWithoutCashPaymentsDetailsInput
  connect: MaterialRequisitionWhereUniqueInput
}

input MaterialRequisitionCreateOneWithoutOtherPaymentDetailsInput {
  create: MaterialRequisitionCreateWithoutOtherPaymentDetailsInput
  connect: MaterialRequisitionWhereUniqueInput
}

input MaterialRequisitionCreateWithoutCashPaymentsDetailsInput {
  quantity: Int!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingCreateOneInput!
  proposedSupplier: SupplierCreateOneInput!
  requestedBy: UserCreateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserCreateOneInput
  otherPaymentDetails: OtherPaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionCreateWithoutOtherPaymentDetailsInput {
  quantity: Int!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingCreateOneInput!
  proposedSupplier: SupplierCreateOneInput!
  requestedBy: UserCreateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserCreateOneInput
  cashPaymentsDetails: PaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionCreateWithoutRequestedByInput {
  quantity: Int!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingCreateOneInput!
  proposedSupplier: SupplierCreateOneInput!
  requestApprovedBy: UserCreateOneInput
  cashPaymentsDetails: PaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
  otherPaymentDetails: OtherPaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput
}

"""An edge in a connection."""
type MaterialRequisitionEdge {
  """The item at the end of the edge."""
  node: MaterialRequisition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MaterialRequisitionOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  otherDetails_ASC
  otherDetails_DESC
  approxCost_ASC
  approxCost_DESC
  paymentMode_ASC
  paymentMode_DESC
  approvalStatus_ASC
  approvalStatus_DESC
  approvalDate_ASC
  approvalDate_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MaterialRequisitionPreviousValues {
  id: ID!
  quantity: Int!
  otherDetails: String
  approxCost: Int!
  paymentMode: String!
  approvalStatus: Boolean!
  approvalDate: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MaterialRequisitionSubscriptionPayload {
  mutation: MutationType!
  node: MaterialRequisition
  updatedFields: [String!]
  previousValues: MaterialRequisitionPreviousValues
}

input MaterialRequisitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MaterialRequisitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MaterialRequisitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MaterialRequisitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MaterialRequisitionWhereInput
}

input MaterialRequisitionUpdateInput {
  quantity: Int
  otherDetails: String
  approxCost: Int
  paymentMode: String
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingUpdateOneInput
  proposedSupplier: SupplierUpdateOneInput
  requestedBy: UserUpdateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserUpdateOneInput
  cashPaymentsDetails: PaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
  otherPaymentDetails: OtherPaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionUpdateManyWithoutRequestedByInput {
  create: [MaterialRequisitionCreateWithoutRequestedByInput!]
  connect: [MaterialRequisitionWhereUniqueInput!]
  disconnect: [MaterialRequisitionWhereUniqueInput!]
  delete: [MaterialRequisitionWhereUniqueInput!]
  update: [MaterialRequisitionUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [MaterialRequisitionUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input MaterialRequisitionUpdateOneWithoutCashPaymentsDetailsInput {
  create: MaterialRequisitionCreateWithoutCashPaymentsDetailsInput
  connect: MaterialRequisitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MaterialRequisitionUpdateWithoutCashPaymentsDetailsDataInput
  upsert: MaterialRequisitionUpsertWithoutCashPaymentsDetailsInput
}

input MaterialRequisitionUpdateOneWithoutOtherPaymentDetailsInput {
  create: MaterialRequisitionCreateWithoutOtherPaymentDetailsInput
  connect: MaterialRequisitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MaterialRequisitionUpdateWithoutOtherPaymentDetailsDataInput
  upsert: MaterialRequisitionUpsertWithoutOtherPaymentDetailsInput
}

input MaterialRequisitionUpdateWithoutCashPaymentsDetailsDataInput {
  quantity: Int
  otherDetails: String
  approxCost: Int
  paymentMode: String
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingUpdateOneInput
  proposedSupplier: SupplierUpdateOneInput
  requestedBy: UserUpdateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserUpdateOneInput
  otherPaymentDetails: OtherPaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionUpdateWithoutOtherPaymentDetailsDataInput {
  quantity: Int
  otherDetails: String
  approxCost: Int
  paymentMode: String
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingUpdateOneInput
  proposedSupplier: SupplierUpdateOneInput
  requestedBy: UserUpdateOneWithoutInitiatedMaterialRequestsInput
  requestApprovedBy: UserUpdateOneInput
  cashPaymentsDetails: PaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionUpdateWithoutRequestedByDataInput {
  quantity: Int
  otherDetails: String
  approxCost: Int
  paymentMode: String
  approvalStatus: Boolean
  approvalDate: DateTime
  materialType: MaterialsCostingUpdateOneInput
  proposedSupplier: SupplierUpdateOneInput
  requestApprovedBy: UserUpdateOneInput
  cashPaymentsDetails: PaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
  otherPaymentDetails: OtherPaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput
}

input MaterialRequisitionUpdateWithWhereUniqueWithoutRequestedByInput {
  where: MaterialRequisitionWhereUniqueInput!
  data: MaterialRequisitionUpdateWithoutRequestedByDataInput!
}

input MaterialRequisitionUpsertWithoutCashPaymentsDetailsInput {
  update: MaterialRequisitionUpdateWithoutCashPaymentsDetailsDataInput!
  create: MaterialRequisitionCreateWithoutCashPaymentsDetailsInput!
}

input MaterialRequisitionUpsertWithoutOtherPaymentDetailsInput {
  update: MaterialRequisitionUpdateWithoutOtherPaymentDetailsDataInput!
  create: MaterialRequisitionCreateWithoutOtherPaymentDetailsInput!
}

input MaterialRequisitionUpsertWithWhereUniqueWithoutRequestedByInput {
  where: MaterialRequisitionWhereUniqueInput!
  update: MaterialRequisitionUpdateWithoutRequestedByDataInput!
  create: MaterialRequisitionCreateWithoutRequestedByInput!
}

input MaterialRequisitionWhereInput {
  """Logical AND on all given filters."""
  AND: [MaterialRequisitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MaterialRequisitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MaterialRequisitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  quantity: Int

  """All values that are not equal to given value."""
  quantity_not: Int

  """All values that are contained in given list."""
  quantity_in: [Int!]

  """All values that are not contained in given list."""
  quantity_not_in: [Int!]

  """All values less than the given value."""
  quantity_lt: Int

  """All values less than or equal the given value."""
  quantity_lte: Int

  """All values greater than the given value."""
  quantity_gt: Int

  """All values greater than or equal the given value."""
  quantity_gte: Int
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  approxCost: Int

  """All values that are not equal to given value."""
  approxCost_not: Int

  """All values that are contained in given list."""
  approxCost_in: [Int!]

  """All values that are not contained in given list."""
  approxCost_not_in: [Int!]

  """All values less than the given value."""
  approxCost_lt: Int

  """All values less than or equal the given value."""
  approxCost_lte: Int

  """All values greater than the given value."""
  approxCost_gt: Int

  """All values greater than or equal the given value."""
  approxCost_gte: Int
  paymentMode: String

  """All values that are not equal to given value."""
  paymentMode_not: String

  """All values that are contained in given list."""
  paymentMode_in: [String!]

  """All values that are not contained in given list."""
  paymentMode_not_in: [String!]

  """All values less than the given value."""
  paymentMode_lt: String

  """All values less than or equal the given value."""
  paymentMode_lte: String

  """All values greater than the given value."""
  paymentMode_gt: String

  """All values greater than or equal the given value."""
  paymentMode_gte: String

  """All values containing the given string."""
  paymentMode_contains: String

  """All values not containing the given string."""
  paymentMode_not_contains: String

  """All values starting with the given string."""
  paymentMode_starts_with: String

  """All values not starting with the given string."""
  paymentMode_not_starts_with: String

  """All values ending with the given string."""
  paymentMode_ends_with: String

  """All values not ending with the given string."""
  paymentMode_not_ends_with: String
  approvalStatus: Boolean

  """All values that are not equal to given value."""
  approvalStatus_not: Boolean
  approvalDate: DateTime

  """All values that are not equal to given value."""
  approvalDate_not: DateTime

  """All values that are contained in given list."""
  approvalDate_in: [DateTime!]

  """All values that are not contained in given list."""
  approvalDate_not_in: [DateTime!]

  """All values less than the given value."""
  approvalDate_lt: DateTime

  """All values less than or equal the given value."""
  approvalDate_lte: DateTime

  """All values greater than the given value."""
  approvalDate_gt: DateTime

  """All values greater than or equal the given value."""
  approvalDate_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  materialType: MaterialsCostingWhereInput
  proposedSupplier: SupplierWhereInput
  requestedBy: UserWhereInput
  requestApprovedBy: UserWhereInput
  cashPaymentsDetails: PaymentIssueWhereInput
  otherPaymentDetails: OtherPaymentIssueWhereInput
}

input MaterialRequisitionWhereUniqueInput {
  id: ID
}

type MaterialsCosting implements Node {
  id: ID!
  materialName: String!
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance(where: StoreBalanceWhereInput): StoreBalance
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy(where: UserWhereInput): User!
  transactions(where: StoreTransactionWhereInput, orderBy: StoreTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoreTransaction!]
}

"""A connection to a list of items."""
type MaterialsCostingConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [MaterialsCostingEdge]!
  aggregate: AggregateMaterialsCosting!
}

input MaterialsCostingCreateInput {
  materialName: String!
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance: StoreBalanceCreateOneWithoutItemInput
  createdBy: UserCreateOneInput!
  transactions: StoreTransactionCreateManyWithoutItemTransactedInput
}

input MaterialsCostingCreateOneInput {
  create: MaterialsCostingCreateInput
  connect: MaterialsCostingWhereUniqueInput
}

input MaterialsCostingCreateOneWithoutBalanceInput {
  create: MaterialsCostingCreateWithoutBalanceInput
  connect: MaterialsCostingWhereUniqueInput
}

input MaterialsCostingCreateOneWithoutTransactionsInput {
  create: MaterialsCostingCreateWithoutTransactionsInput
  connect: MaterialsCostingWhereUniqueInput
}

input MaterialsCostingCreateWithoutBalanceInput {
  materialName: String!
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  createdBy: UserCreateOneInput!
  transactions: StoreTransactionCreateManyWithoutItemTransactedInput
}

input MaterialsCostingCreateWithoutTransactionsInput {
  materialName: String!
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance: StoreBalanceCreateOneWithoutItemInput
  createdBy: UserCreateOneInput!
}

"""An edge in a connection."""
type MaterialsCostingEdge {
  """The item at the end of the edge."""
  node: MaterialsCosting!

  """A cursor for use in pagination."""
  cursor: String!
}

enum MaterialsCostingOrderByInput {
  id_ASC
  id_DESC
  materialName_ASC
  materialName_DESC
  materialDescription_ASC
  materialDescription_DESC
  units_ASC
  units_DESC
  costPerUnit_ASC
  costPerUnit_DESC
  standardUnit_ASC
  standardUnit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MaterialsCostingPreviousValues {
  id: ID!
  materialName: String!
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type MaterialsCostingSubscriptionPayload {
  mutation: MutationType!
  node: MaterialsCosting
  updatedFields: [String!]
  previousValues: MaterialsCostingPreviousValues
}

input MaterialsCostingSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [MaterialsCostingSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [MaterialsCostingSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MaterialsCostingSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: MaterialsCostingWhereInput
}

input MaterialsCostingUpdateDataInput {
  materialName: String
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance: StoreBalanceUpdateOneWithoutItemInput
  createdBy: UserUpdateOneInput
  transactions: StoreTransactionUpdateManyWithoutItemTransactedInput
}

input MaterialsCostingUpdateInput {
  materialName: String
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance: StoreBalanceUpdateOneWithoutItemInput
  createdBy: UserUpdateOneInput
  transactions: StoreTransactionUpdateManyWithoutItemTransactedInput
}

input MaterialsCostingUpdateOneInput {
  create: MaterialsCostingCreateInput
  connect: MaterialsCostingWhereUniqueInput
  delete: Boolean
  update: MaterialsCostingUpdateDataInput
  upsert: MaterialsCostingUpsertNestedInput
}

input MaterialsCostingUpdateOneWithoutBalanceInput {
  create: MaterialsCostingCreateWithoutBalanceInput
  connect: MaterialsCostingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MaterialsCostingUpdateWithoutBalanceDataInput
  upsert: MaterialsCostingUpsertWithoutBalanceInput
}

input MaterialsCostingUpdateOneWithoutTransactionsInput {
  create: MaterialsCostingCreateWithoutTransactionsInput
  connect: MaterialsCostingWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: MaterialsCostingUpdateWithoutTransactionsDataInput
  upsert: MaterialsCostingUpsertWithoutTransactionsInput
}

input MaterialsCostingUpdateWithoutBalanceDataInput {
  materialName: String
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  createdBy: UserUpdateOneInput
  transactions: StoreTransactionUpdateManyWithoutItemTransactedInput
}

input MaterialsCostingUpdateWithoutTransactionsDataInput {
  materialName: String
  materialDescription: String
  units: Int
  costPerUnit: Int
  standardUnit: String
  balance: StoreBalanceUpdateOneWithoutItemInput
  createdBy: UserUpdateOneInput
}

input MaterialsCostingUpsertNestedInput {
  update: MaterialsCostingUpdateDataInput!
  create: MaterialsCostingCreateInput!
}

input MaterialsCostingUpsertWithoutBalanceInput {
  update: MaterialsCostingUpdateWithoutBalanceDataInput!
  create: MaterialsCostingCreateWithoutBalanceInput!
}

input MaterialsCostingUpsertWithoutTransactionsInput {
  update: MaterialsCostingUpdateWithoutTransactionsDataInput!
  create: MaterialsCostingCreateWithoutTransactionsInput!
}

input MaterialsCostingWhereInput {
  """Logical AND on all given filters."""
  AND: [MaterialsCostingWhereInput!]

  """Logical OR on all given filters."""
  OR: [MaterialsCostingWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [MaterialsCostingWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  materialName: String

  """All values that are not equal to given value."""
  materialName_not: String

  """All values that are contained in given list."""
  materialName_in: [String!]

  """All values that are not contained in given list."""
  materialName_not_in: [String!]

  """All values less than the given value."""
  materialName_lt: String

  """All values less than or equal the given value."""
  materialName_lte: String

  """All values greater than the given value."""
  materialName_gt: String

  """All values greater than or equal the given value."""
  materialName_gte: String

  """All values containing the given string."""
  materialName_contains: String

  """All values not containing the given string."""
  materialName_not_contains: String

  """All values starting with the given string."""
  materialName_starts_with: String

  """All values not starting with the given string."""
  materialName_not_starts_with: String

  """All values ending with the given string."""
  materialName_ends_with: String

  """All values not ending with the given string."""
  materialName_not_ends_with: String
  materialDescription: String

  """All values that are not equal to given value."""
  materialDescription_not: String

  """All values that are contained in given list."""
  materialDescription_in: [String!]

  """All values that are not contained in given list."""
  materialDescription_not_in: [String!]

  """All values less than the given value."""
  materialDescription_lt: String

  """All values less than or equal the given value."""
  materialDescription_lte: String

  """All values greater than the given value."""
  materialDescription_gt: String

  """All values greater than or equal the given value."""
  materialDescription_gte: String

  """All values containing the given string."""
  materialDescription_contains: String

  """All values not containing the given string."""
  materialDescription_not_contains: String

  """All values starting with the given string."""
  materialDescription_starts_with: String

  """All values not starting with the given string."""
  materialDescription_not_starts_with: String

  """All values ending with the given string."""
  materialDescription_ends_with: String

  """All values not ending with the given string."""
  materialDescription_not_ends_with: String
  units: Int

  """All values that are not equal to given value."""
  units_not: Int

  """All values that are contained in given list."""
  units_in: [Int!]

  """All values that are not contained in given list."""
  units_not_in: [Int!]

  """All values less than the given value."""
  units_lt: Int

  """All values less than or equal the given value."""
  units_lte: Int

  """All values greater than the given value."""
  units_gt: Int

  """All values greater than or equal the given value."""
  units_gte: Int
  costPerUnit: Int

  """All values that are not equal to given value."""
  costPerUnit_not: Int

  """All values that are contained in given list."""
  costPerUnit_in: [Int!]

  """All values that are not contained in given list."""
  costPerUnit_not_in: [Int!]

  """All values less than the given value."""
  costPerUnit_lt: Int

  """All values less than or equal the given value."""
  costPerUnit_lte: Int

  """All values greater than the given value."""
  costPerUnit_gt: Int

  """All values greater than or equal the given value."""
  costPerUnit_gte: Int
  standardUnit: String

  """All values that are not equal to given value."""
  standardUnit_not: String

  """All values that are contained in given list."""
  standardUnit_in: [String!]

  """All values that are not contained in given list."""
  standardUnit_not_in: [String!]

  """All values less than the given value."""
  standardUnit_lt: String

  """All values less than or equal the given value."""
  standardUnit_lte: String

  """All values greater than the given value."""
  standardUnit_gt: String

  """All values greater than or equal the given value."""
  standardUnit_gte: String

  """All values containing the given string."""
  standardUnit_contains: String

  """All values not containing the given string."""
  standardUnit_not_contains: String

  """All values starting with the given string."""
  standardUnit_starts_with: String

  """All values not starting with the given string."""
  standardUnit_not_starts_with: String

  """All values ending with the given string."""
  standardUnit_ends_with: String

  """All values not ending with the given string."""
  standardUnit_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  balance: StoreBalanceWhereInput
  createdBy: UserWhereInput
  transactions_every: StoreTransactionWhereInput
  transactions_some: StoreTransactionWhereInput
  transactions_none: StoreTransactionWhereInput
  _MagicalBackRelation_MaterialRequisitionToMaterialsCosting_every: MaterialRequisitionWhereInput
  _MagicalBackRelation_MaterialRequisitionToMaterialsCosting_some: MaterialRequisitionWhereInput
  _MagicalBackRelation_MaterialRequisitionToMaterialsCosting_none: MaterialRequisitionWhereInput
  _MagicalBackRelation_MaterialsCostingToSupplier_every: SupplierWhereInput
  _MagicalBackRelation_MaterialsCostingToSupplier_some: SupplierWhereInput
  _MagicalBackRelation_MaterialsCostingToSupplier_none: SupplierWhereInput
}

input MaterialsCostingWhereUniqueInput {
  id: ID
}

type Mutation {
  createVehicleOwner(data: VehicleOwnerCreateInput!): VehicleOwner!
  createDriver(data: DriverCreateInput!): Driver!
  createVehicleRequisition(data: VehicleRequisitionCreateInput!): VehicleRequisition!
  createPost(data: PostCreateInput!): Post!
  createRole(data: RoleCreateInput!): Role!
  createVehicleAssignment(data: VehicleAssignmentCreateInput!): VehicleAssignment!
  createServiceRequisition(data: ServiceRequisitionCreateInput!): ServiceRequisition!
  createPersonnelAttendance(data: PersonnelAttendanceCreateInput!): PersonnelAttendance!
  createRequestService(data: RequestServiceCreateInput!): RequestService!
  createRepairsRequisition(data: RepairsRequisitionCreateInput!): RepairsRequisition!
  createVehicleInspection(data: VehicleInspectionCreateInput!): VehicleInspection!
  createMaterialRequisition(data: MaterialRequisitionCreateInput!): MaterialRequisition!
  createOtherPaymentIssue(data: OtherPaymentIssueCreateInput!): OtherPaymentIssue!
  createStoreBalance(data: StoreBalanceCreateInput!): StoreBalance!
  createStoreTransaction(data: StoreTransactionCreateInput!): StoreTransaction!
  createPaymentIssue(data: PaymentIssueCreateInput!): PaymentIssue!
  createSection(data: SectionCreateInput!): Section!
  createSectionAssignment(data: SectionAssignmentCreateInput!): SectionAssignment!
  createSupplier(data: SupplierCreateInput!): Supplier!
  createProject(data: ProjectCreateInput!): Project!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  createPersonnel(data: PersonnelCreateInput!): Personnel!
  createMaterialsCosting(data: MaterialsCostingCreateInput!): MaterialsCosting!
  createUser(data: UserCreateInput!): User!
  updateVehicleOwner(data: VehicleOwnerUpdateInput!, where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  updateDriver(data: DriverUpdateInput!, where: DriverWhereUniqueInput!): Driver
  updateVehicleRequisition(data: VehicleRequisitionUpdateInput!, where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateRole(data: RoleUpdateInput!, where: RoleWhereUniqueInput!): Role
  updateVehicleAssignment(data: VehicleAssignmentUpdateInput!, where: VehicleAssignmentWhereUniqueInput!): VehicleAssignment
  updateServiceRequisition(data: ServiceRequisitionUpdateInput!, where: ServiceRequisitionWhereUniqueInput!): ServiceRequisition
  updatePersonnelAttendance(data: PersonnelAttendanceUpdateInput!, where: PersonnelAttendanceWhereUniqueInput!): PersonnelAttendance
  updateRequestService(data: RequestServiceUpdateInput!, where: RequestServiceWhereUniqueInput!): RequestService
  updateRepairsRequisition(data: RepairsRequisitionUpdateInput!, where: RepairsRequisitionWhereUniqueInput!): RepairsRequisition
  updateVehicleInspection(data: VehicleInspectionUpdateInput!, where: VehicleInspectionWhereUniqueInput!): VehicleInspection
  updateMaterialRequisition(data: MaterialRequisitionUpdateInput!, where: MaterialRequisitionWhereUniqueInput!): MaterialRequisition
  updateOtherPaymentIssue(data: OtherPaymentIssueUpdateInput!, where: OtherPaymentIssueWhereUniqueInput!): OtherPaymentIssue
  updateStoreBalance(data: StoreBalanceUpdateInput!, where: StoreBalanceWhereUniqueInput!): StoreBalance
  updateStoreTransaction(data: StoreTransactionUpdateInput!, where: StoreTransactionWhereUniqueInput!): StoreTransaction
  updatePaymentIssue(data: PaymentIssueUpdateInput!, where: PaymentIssueWhereUniqueInput!): PaymentIssue
  updateSection(data: SectionUpdateInput!, where: SectionWhereUniqueInput!): Section
  updateSectionAssignment(data: SectionAssignmentUpdateInput!, where: SectionAssignmentWhereUniqueInput!): SectionAssignment
  updateSupplier(data: SupplierUpdateInput!, where: SupplierWhereUniqueInput!): Supplier
  updateProject(data: ProjectUpdateInput!, where: ProjectWhereUniqueInput!): Project
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle
  updatePersonnel(data: PersonnelUpdateInput!, where: PersonnelWhereUniqueInput!): Personnel
  updateMaterialsCosting(data: MaterialsCostingUpdateInput!, where: MaterialsCostingWhereUniqueInput!): MaterialsCosting
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteVehicleOwner(where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  deleteDriver(where: DriverWhereUniqueInput!): Driver
  deleteVehicleRequisition(where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  deletePost(where: PostWhereUniqueInput!): Post
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteVehicleAssignment(where: VehicleAssignmentWhereUniqueInput!): VehicleAssignment
  deleteServiceRequisition(where: ServiceRequisitionWhereUniqueInput!): ServiceRequisition
  deletePersonnelAttendance(where: PersonnelAttendanceWhereUniqueInput!): PersonnelAttendance
  deleteRequestService(where: RequestServiceWhereUniqueInput!): RequestService
  deleteRepairsRequisition(where: RepairsRequisitionWhereUniqueInput!): RepairsRequisition
  deleteVehicleInspection(where: VehicleInspectionWhereUniqueInput!): VehicleInspection
  deleteMaterialRequisition(where: MaterialRequisitionWhereUniqueInput!): MaterialRequisition
  deleteOtherPaymentIssue(where: OtherPaymentIssueWhereUniqueInput!): OtherPaymentIssue
  deleteStoreBalance(where: StoreBalanceWhereUniqueInput!): StoreBalance
  deleteStoreTransaction(where: StoreTransactionWhereUniqueInput!): StoreTransaction
  deletePaymentIssue(where: PaymentIssueWhereUniqueInput!): PaymentIssue
  deleteSection(where: SectionWhereUniqueInput!): Section
  deleteSectionAssignment(where: SectionAssignmentWhereUniqueInput!): SectionAssignment
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  deleteProject(where: ProjectWhereUniqueInput!): Project
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle
  deletePersonnel(where: PersonnelWhereUniqueInput!): Personnel
  deleteMaterialsCosting(where: MaterialsCostingWhereUniqueInput!): MaterialsCosting
  deleteUser(where: UserWhereUniqueInput!): User
  upsertVehicleOwner(where: VehicleOwnerWhereUniqueInput!, create: VehicleOwnerCreateInput!, update: VehicleOwnerUpdateInput!): VehicleOwner!
  upsertDriver(where: DriverWhereUniqueInput!, create: DriverCreateInput!, update: DriverUpdateInput!): Driver!
  upsertVehicleRequisition(where: VehicleRequisitionWhereUniqueInput!, create: VehicleRequisitionCreateInput!, update: VehicleRequisitionUpdateInput!): VehicleRequisition!
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertRole(where: RoleWhereUniqueInput!, create: RoleCreateInput!, update: RoleUpdateInput!): Role!
  upsertVehicleAssignment(where: VehicleAssignmentWhereUniqueInput!, create: VehicleAssignmentCreateInput!, update: VehicleAssignmentUpdateInput!): VehicleAssignment!
  upsertServiceRequisition(where: ServiceRequisitionWhereUniqueInput!, create: ServiceRequisitionCreateInput!, update: ServiceRequisitionUpdateInput!): ServiceRequisition!
  upsertPersonnelAttendance(where: PersonnelAttendanceWhereUniqueInput!, create: PersonnelAttendanceCreateInput!, update: PersonnelAttendanceUpdateInput!): PersonnelAttendance!
  upsertRequestService(where: RequestServiceWhereUniqueInput!, create: RequestServiceCreateInput!, update: RequestServiceUpdateInput!): RequestService!
  upsertRepairsRequisition(where: RepairsRequisitionWhereUniqueInput!, create: RepairsRequisitionCreateInput!, update: RepairsRequisitionUpdateInput!): RepairsRequisition!
  upsertVehicleInspection(where: VehicleInspectionWhereUniqueInput!, create: VehicleInspectionCreateInput!, update: VehicleInspectionUpdateInput!): VehicleInspection!
  upsertMaterialRequisition(where: MaterialRequisitionWhereUniqueInput!, create: MaterialRequisitionCreateInput!, update: MaterialRequisitionUpdateInput!): MaterialRequisition!
  upsertOtherPaymentIssue(where: OtherPaymentIssueWhereUniqueInput!, create: OtherPaymentIssueCreateInput!, update: OtherPaymentIssueUpdateInput!): OtherPaymentIssue!
  upsertStoreBalance(where: StoreBalanceWhereUniqueInput!, create: StoreBalanceCreateInput!, update: StoreBalanceUpdateInput!): StoreBalance!
  upsertStoreTransaction(where: StoreTransactionWhereUniqueInput!, create: StoreTransactionCreateInput!, update: StoreTransactionUpdateInput!): StoreTransaction!
  upsertPaymentIssue(where: PaymentIssueWhereUniqueInput!, create: PaymentIssueCreateInput!, update: PaymentIssueUpdateInput!): PaymentIssue!
  upsertSection(where: SectionWhereUniqueInput!, create: SectionCreateInput!, update: SectionUpdateInput!): Section!
  upsertSectionAssignment(where: SectionAssignmentWhereUniqueInput!, create: SectionAssignmentCreateInput!, update: SectionAssignmentUpdateInput!): SectionAssignment!
  upsertSupplier(where: SupplierWhereUniqueInput!, create: SupplierCreateInput!, update: SupplierUpdateInput!): Supplier!
  upsertProject(where: ProjectWhereUniqueInput!, create: ProjectCreateInput!, update: ProjectUpdateInput!): Project!
  upsertVehicle(where: VehicleWhereUniqueInput!, create: VehicleCreateInput!, update: VehicleUpdateInput!): Vehicle!
  upsertPersonnel(where: PersonnelWhereUniqueInput!, create: PersonnelCreateInput!, update: PersonnelUpdateInput!): Personnel!
  upsertMaterialsCosting(where: MaterialsCostingWhereUniqueInput!, create: MaterialsCostingCreateInput!, update: MaterialsCostingUpdateInput!): MaterialsCosting!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyVehicleOwners(data: VehicleOwnerUpdateInput!, where: VehicleOwnerWhereInput): BatchPayload!
  updateManyDrivers(data: DriverUpdateInput!, where: DriverWhereInput): BatchPayload!
  updateManyVehicleRequisitions(data: VehicleRequisitionUpdateInput!, where: VehicleRequisitionWhereInput): BatchPayload!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput): BatchPayload!
  updateManyRoles(data: RoleUpdateInput!, where: RoleWhereInput): BatchPayload!
  updateManyVehicleAssignments(data: VehicleAssignmentUpdateInput!, where: VehicleAssignmentWhereInput): BatchPayload!
  updateManyServiceRequisitions(data: ServiceRequisitionUpdateInput!, where: ServiceRequisitionWhereInput): BatchPayload!
  updateManyPersonnelAttendances(data: PersonnelAttendanceUpdateInput!, where: PersonnelAttendanceWhereInput): BatchPayload!
  updateManyRequestServices(data: RequestServiceUpdateInput!, where: RequestServiceWhereInput): BatchPayload!
  updateManyRepairsRequisitions(data: RepairsRequisitionUpdateInput!, where: RepairsRequisitionWhereInput): BatchPayload!
  updateManyVehicleInspections(data: VehicleInspectionUpdateInput!, where: VehicleInspectionWhereInput): BatchPayload!
  updateManyMaterialRequisitions(data: MaterialRequisitionUpdateInput!, where: MaterialRequisitionWhereInput): BatchPayload!
  updateManyOtherPaymentIssues(data: OtherPaymentIssueUpdateInput!, where: OtherPaymentIssueWhereInput): BatchPayload!
  updateManyStoreBalances(data: StoreBalanceUpdateInput!, where: StoreBalanceWhereInput): BatchPayload!
  updateManyStoreTransactions(data: StoreTransactionUpdateInput!, where: StoreTransactionWhereInput): BatchPayload!
  updateManyPaymentIssues(data: PaymentIssueUpdateInput!, where: PaymentIssueWhereInput): BatchPayload!
  updateManySections(data: SectionUpdateInput!, where: SectionWhereInput): BatchPayload!
  updateManySectionAssignments(data: SectionAssignmentUpdateInput!, where: SectionAssignmentWhereInput): BatchPayload!
  updateManySuppliers(data: SupplierUpdateInput!, where: SupplierWhereInput): BatchPayload!
  updateManyProjects(data: ProjectUpdateInput!, where: ProjectWhereInput): BatchPayload!
  updateManyVehicles(data: VehicleUpdateInput!, where: VehicleWhereInput): BatchPayload!
  updateManyPersonnels(data: PersonnelUpdateInput!, where: PersonnelWhereInput): BatchPayload!
  updateManyMaterialsCostings(data: MaterialsCostingUpdateInput!, where: MaterialsCostingWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManyVehicleOwners(where: VehicleOwnerWhereInput): BatchPayload!
  deleteManyDrivers(where: DriverWhereInput): BatchPayload!
  deleteManyVehicleRequisitions(where: VehicleRequisitionWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyRoles(where: RoleWhereInput): BatchPayload!
  deleteManyVehicleAssignments(where: VehicleAssignmentWhereInput): BatchPayload!
  deleteManyServiceRequisitions(where: ServiceRequisitionWhereInput): BatchPayload!
  deleteManyPersonnelAttendances(where: PersonnelAttendanceWhereInput): BatchPayload!
  deleteManyRequestServices(where: RequestServiceWhereInput): BatchPayload!
  deleteManyRepairsRequisitions(where: RepairsRequisitionWhereInput): BatchPayload!
  deleteManyVehicleInspections(where: VehicleInspectionWhereInput): BatchPayload!
  deleteManyMaterialRequisitions(where: MaterialRequisitionWhereInput): BatchPayload!
  deleteManyOtherPaymentIssues(where: OtherPaymentIssueWhereInput): BatchPayload!
  deleteManyStoreBalances(where: StoreBalanceWhereInput): BatchPayload!
  deleteManyStoreTransactions(where: StoreTransactionWhereInput): BatchPayload!
  deleteManyPaymentIssues(where: PaymentIssueWhereInput): BatchPayload!
  deleteManySections(where: SectionWhereInput): BatchPayload!
  deleteManySectionAssignments(where: SectionAssignmentWhereInput): BatchPayload!
  deleteManySuppliers(where: SupplierWhereInput): BatchPayload!
  deleteManyProjects(where: ProjectWhereInput): BatchPayload!
  deleteManyVehicles(where: VehicleWhereInput): BatchPayload!
  deleteManyPersonnels(where: PersonnelWhereInput): BatchPayload!
  deleteManyMaterialsCostings(where: MaterialsCostingWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type OtherPaymentIssue implements Node {
  id: ID!
  amountPaid: Int!
  invoiceNumber: String!
  discountRecieved: Int!
  requestedMaterialsPayment(where: MaterialRequisitionWhereInput): MaterialRequisition
  datePaid: DateTime!
  otherDetails: String
  issuedBy(where: UserWhereInput): User!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type OtherPaymentIssueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OtherPaymentIssueEdge]!
  aggregate: AggregateOtherPaymentIssue!
}

input OtherPaymentIssueCreateInput {
  amountPaid: Int!
  invoiceNumber: String!
  discountRecieved: Int!
  datePaid: DateTime!
  otherDetails: String
  requestedMaterialsPayment: MaterialRequisitionCreateOneWithoutOtherPaymentDetailsInput
  issuedBy: UserCreateOneInput!
}

input OtherPaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput {
  create: OtherPaymentIssueCreateWithoutRequestedMaterialsPaymentInput
  connect: OtherPaymentIssueWhereUniqueInput
}

input OtherPaymentIssueCreateWithoutRequestedMaterialsPaymentInput {
  amountPaid: Int!
  invoiceNumber: String!
  discountRecieved: Int!
  datePaid: DateTime!
  otherDetails: String
  issuedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type OtherPaymentIssueEdge {
  """The item at the end of the edge."""
  node: OtherPaymentIssue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum OtherPaymentIssueOrderByInput {
  id_ASC
  id_DESC
  amountPaid_ASC
  amountPaid_DESC
  invoiceNumber_ASC
  invoiceNumber_DESC
  discountRecieved_ASC
  discountRecieved_DESC
  datePaid_ASC
  datePaid_DESC
  otherDetails_ASC
  otherDetails_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type OtherPaymentIssuePreviousValues {
  id: ID!
  amountPaid: Int!
  invoiceNumber: String!
  discountRecieved: Int!
  datePaid: DateTime!
  otherDetails: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type OtherPaymentIssueSubscriptionPayload {
  mutation: MutationType!
  node: OtherPaymentIssue
  updatedFields: [String!]
  previousValues: OtherPaymentIssuePreviousValues
}

input OtherPaymentIssueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [OtherPaymentIssueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [OtherPaymentIssueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OtherPaymentIssueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: OtherPaymentIssueWhereInput
}

input OtherPaymentIssueUpdateInput {
  amountPaid: Int
  invoiceNumber: String
  discountRecieved: Int
  datePaid: DateTime
  otherDetails: String
  requestedMaterialsPayment: MaterialRequisitionUpdateOneWithoutOtherPaymentDetailsInput
  issuedBy: UserUpdateOneInput
}

input OtherPaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput {
  create: OtherPaymentIssueCreateWithoutRequestedMaterialsPaymentInput
  connect: OtherPaymentIssueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: OtherPaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput
  upsert: OtherPaymentIssueUpsertWithoutRequestedMaterialsPaymentInput
}

input OtherPaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput {
  amountPaid: Int
  invoiceNumber: String
  discountRecieved: Int
  datePaid: DateTime
  otherDetails: String
  issuedBy: UserUpdateOneInput
}

input OtherPaymentIssueUpsertWithoutRequestedMaterialsPaymentInput {
  update: OtherPaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput!
  create: OtherPaymentIssueCreateWithoutRequestedMaterialsPaymentInput!
}

input OtherPaymentIssueWhereInput {
  """Logical AND on all given filters."""
  AND: [OtherPaymentIssueWhereInput!]

  """Logical OR on all given filters."""
  OR: [OtherPaymentIssueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [OtherPaymentIssueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amountPaid: Int

  """All values that are not equal to given value."""
  amountPaid_not: Int

  """All values that are contained in given list."""
  amountPaid_in: [Int!]

  """All values that are not contained in given list."""
  amountPaid_not_in: [Int!]

  """All values less than the given value."""
  amountPaid_lt: Int

  """All values less than or equal the given value."""
  amountPaid_lte: Int

  """All values greater than the given value."""
  amountPaid_gt: Int

  """All values greater than or equal the given value."""
  amountPaid_gte: Int
  invoiceNumber: String

  """All values that are not equal to given value."""
  invoiceNumber_not: String

  """All values that are contained in given list."""
  invoiceNumber_in: [String!]

  """All values that are not contained in given list."""
  invoiceNumber_not_in: [String!]

  """All values less than the given value."""
  invoiceNumber_lt: String

  """All values less than or equal the given value."""
  invoiceNumber_lte: String

  """All values greater than the given value."""
  invoiceNumber_gt: String

  """All values greater than or equal the given value."""
  invoiceNumber_gte: String

  """All values containing the given string."""
  invoiceNumber_contains: String

  """All values not containing the given string."""
  invoiceNumber_not_contains: String

  """All values starting with the given string."""
  invoiceNumber_starts_with: String

  """All values not starting with the given string."""
  invoiceNumber_not_starts_with: String

  """All values ending with the given string."""
  invoiceNumber_ends_with: String

  """All values not ending with the given string."""
  invoiceNumber_not_ends_with: String
  discountRecieved: Int

  """All values that are not equal to given value."""
  discountRecieved_not: Int

  """All values that are contained in given list."""
  discountRecieved_in: [Int!]

  """All values that are not contained in given list."""
  discountRecieved_not_in: [Int!]

  """All values less than the given value."""
  discountRecieved_lt: Int

  """All values less than or equal the given value."""
  discountRecieved_lte: Int

  """All values greater than the given value."""
  discountRecieved_gt: Int

  """All values greater than or equal the given value."""
  discountRecieved_gte: Int
  datePaid: DateTime

  """All values that are not equal to given value."""
  datePaid_not: DateTime

  """All values that are contained in given list."""
  datePaid_in: [DateTime!]

  """All values that are not contained in given list."""
  datePaid_not_in: [DateTime!]

  """All values less than the given value."""
  datePaid_lt: DateTime

  """All values less than or equal the given value."""
  datePaid_lte: DateTime

  """All values greater than the given value."""
  datePaid_gt: DateTime

  """All values greater than or equal the given value."""
  datePaid_gte: DateTime
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requestedMaterialsPayment: MaterialRequisitionWhereInput
  issuedBy: UserWhereInput
}

input OtherPaymentIssueWhereUniqueInput {
  id: ID
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type PaymentIssue implements Node {
  id: ID!
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  requestedServicePayment(where: RequestServiceWhereInput): RequestService
  repairsRequisitionPayment(where: RepairsRequisitionWhereInput): RepairsRequisition
  requestedMaterialsPayment(where: MaterialRequisitionWhereInput): MaterialRequisition
  createdAt: DateTime!
  updatedAt: DateTime!
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  issuedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PaymentIssueConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PaymentIssueEdge]!
  aggregate: AggregatePaymentIssue!
}

input PaymentIssueCreateInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceCreateOneWithoutPaymentsDetailsInput
  repairsRequisitionPayment: RepairsRequisitionCreateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionCreateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserCreateOneInput!
}

input PaymentIssueCreateOneInput {
  create: PaymentIssueCreateInput
  connect: PaymentIssueWhereUniqueInput
}

input PaymentIssueCreateOneWithoutRepairsRequisitionPaymentInput {
  create: PaymentIssueCreateWithoutRepairsRequisitionPaymentInput
  connect: PaymentIssueWhereUniqueInput
}

input PaymentIssueCreateOneWithoutRequestedMaterialsPaymentInput {
  create: PaymentIssueCreateWithoutRequestedMaterialsPaymentInput
  connect: PaymentIssueWhereUniqueInput
}

input PaymentIssueCreateOneWithoutRequestedServicePaymentInput {
  create: PaymentIssueCreateWithoutRequestedServicePaymentInput
  connect: PaymentIssueWhereUniqueInput
}

input PaymentIssueCreateWithoutRepairsRequisitionPaymentInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceCreateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionCreateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserCreateOneInput!
}

input PaymentIssueCreateWithoutRequestedMaterialsPaymentInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceCreateOneWithoutPaymentsDetailsInput
  repairsRequisitionPayment: RepairsRequisitionCreateOneWithoutPaymentsDetailsInput
  issuedBy: UserCreateOneInput!
}

input PaymentIssueCreateWithoutRequestedServicePaymentInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  repairsRequisitionPayment: RepairsRequisitionCreateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionCreateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type PaymentIssueEdge {
  """The item at the end of the edge."""
  node: PaymentIssue!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PaymentIssueOrderByInput {
  id_ASC
  id_DESC
  amountIssued_ASC
  amountIssued_DESC
  amountCharged_ASC
  amountCharged_DESC
  recieptNumber_ASC
  recieptNumber_DESC
  cashReported_ASC
  cashReported_DESC
  amountReturned_ASC
  amountReturned_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  dateIssued_ASC
  dateIssued_DESC
  dateReported_ASC
  dateReported_DESC
  otherDetails_ASC
  otherDetails_DESC
}

type PaymentIssuePreviousValues {
  id: ID!
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  createdAt: DateTime!
  updatedAt: DateTime!
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
}

type PaymentIssueSubscriptionPayload {
  mutation: MutationType!
  node: PaymentIssue
  updatedFields: [String!]
  previousValues: PaymentIssuePreviousValues
}

input PaymentIssueSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentIssueSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentIssueSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentIssueSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PaymentIssueWhereInput
}

input PaymentIssueUpdateDataInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceUpdateOneWithoutPaymentsDetailsInput
  repairsRequisitionPayment: RepairsRequisitionUpdateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionUpdateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserUpdateOneInput
}

input PaymentIssueUpdateInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceUpdateOneWithoutPaymentsDetailsInput
  repairsRequisitionPayment: RepairsRequisitionUpdateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionUpdateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserUpdateOneInput
}

input PaymentIssueUpdateOneInput {
  create: PaymentIssueCreateInput
  connect: PaymentIssueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentIssueUpdateDataInput
  upsert: PaymentIssueUpsertNestedInput
}

input PaymentIssueUpdateOneWithoutRepairsRequisitionPaymentInput {
  create: PaymentIssueCreateWithoutRepairsRequisitionPaymentInput
  connect: PaymentIssueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentIssueUpdateWithoutRepairsRequisitionPaymentDataInput
  upsert: PaymentIssueUpsertWithoutRepairsRequisitionPaymentInput
}

input PaymentIssueUpdateOneWithoutRequestedMaterialsPaymentInput {
  create: PaymentIssueCreateWithoutRequestedMaterialsPaymentInput
  connect: PaymentIssueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput
  upsert: PaymentIssueUpsertWithoutRequestedMaterialsPaymentInput
}

input PaymentIssueUpdateOneWithoutRequestedServicePaymentInput {
  create: PaymentIssueCreateWithoutRequestedServicePaymentInput
  connect: PaymentIssueWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PaymentIssueUpdateWithoutRequestedServicePaymentDataInput
  upsert: PaymentIssueUpsertWithoutRequestedServicePaymentInput
}

input PaymentIssueUpdateWithoutRepairsRequisitionPaymentDataInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceUpdateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionUpdateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserUpdateOneInput
}

input PaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  requestedServicePayment: RequestServiceUpdateOneWithoutPaymentsDetailsInput
  repairsRequisitionPayment: RepairsRequisitionUpdateOneWithoutPaymentsDetailsInput
  issuedBy: UserUpdateOneInput
}

input PaymentIssueUpdateWithoutRequestedServicePaymentDataInput {
  amountIssued: Int
  amountCharged: Int
  recieptNumber: String
  cashReported: Boolean
  amountReturned: Int
  dateIssued: DateTime
  dateReported: DateTime
  otherDetails: String
  repairsRequisitionPayment: RepairsRequisitionUpdateOneWithoutPaymentsDetailsInput
  requestedMaterialsPayment: MaterialRequisitionUpdateOneWithoutCashPaymentsDetailsInput
  issuedBy: UserUpdateOneInput
}

input PaymentIssueUpsertNestedInput {
  update: PaymentIssueUpdateDataInput!
  create: PaymentIssueCreateInput!
}

input PaymentIssueUpsertWithoutRepairsRequisitionPaymentInput {
  update: PaymentIssueUpdateWithoutRepairsRequisitionPaymentDataInput!
  create: PaymentIssueCreateWithoutRepairsRequisitionPaymentInput!
}

input PaymentIssueUpsertWithoutRequestedMaterialsPaymentInput {
  update: PaymentIssueUpdateWithoutRequestedMaterialsPaymentDataInput!
  create: PaymentIssueCreateWithoutRequestedMaterialsPaymentInput!
}

input PaymentIssueUpsertWithoutRequestedServicePaymentInput {
  update: PaymentIssueUpdateWithoutRequestedServicePaymentDataInput!
  create: PaymentIssueCreateWithoutRequestedServicePaymentInput!
}

input PaymentIssueWhereInput {
  """Logical AND on all given filters."""
  AND: [PaymentIssueWhereInput!]

  """Logical OR on all given filters."""
  OR: [PaymentIssueWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PaymentIssueWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  amountIssued: Int

  """All values that are not equal to given value."""
  amountIssued_not: Int

  """All values that are contained in given list."""
  amountIssued_in: [Int!]

  """All values that are not contained in given list."""
  amountIssued_not_in: [Int!]

  """All values less than the given value."""
  amountIssued_lt: Int

  """All values less than or equal the given value."""
  amountIssued_lte: Int

  """All values greater than the given value."""
  amountIssued_gt: Int

  """All values greater than or equal the given value."""
  amountIssued_gte: Int
  amountCharged: Int

  """All values that are not equal to given value."""
  amountCharged_not: Int

  """All values that are contained in given list."""
  amountCharged_in: [Int!]

  """All values that are not contained in given list."""
  amountCharged_not_in: [Int!]

  """All values less than the given value."""
  amountCharged_lt: Int

  """All values less than or equal the given value."""
  amountCharged_lte: Int

  """All values greater than the given value."""
  amountCharged_gt: Int

  """All values greater than or equal the given value."""
  amountCharged_gte: Int
  recieptNumber: String

  """All values that are not equal to given value."""
  recieptNumber_not: String

  """All values that are contained in given list."""
  recieptNumber_in: [String!]

  """All values that are not contained in given list."""
  recieptNumber_not_in: [String!]

  """All values less than the given value."""
  recieptNumber_lt: String

  """All values less than or equal the given value."""
  recieptNumber_lte: String

  """All values greater than the given value."""
  recieptNumber_gt: String

  """All values greater than or equal the given value."""
  recieptNumber_gte: String

  """All values containing the given string."""
  recieptNumber_contains: String

  """All values not containing the given string."""
  recieptNumber_not_contains: String

  """All values starting with the given string."""
  recieptNumber_starts_with: String

  """All values not starting with the given string."""
  recieptNumber_not_starts_with: String

  """All values ending with the given string."""
  recieptNumber_ends_with: String

  """All values not ending with the given string."""
  recieptNumber_not_ends_with: String
  cashReported: Boolean

  """All values that are not equal to given value."""
  cashReported_not: Boolean
  amountReturned: Int

  """All values that are not equal to given value."""
  amountReturned_not: Int

  """All values that are contained in given list."""
  amountReturned_in: [Int!]

  """All values that are not contained in given list."""
  amountReturned_not_in: [Int!]

  """All values less than the given value."""
  amountReturned_lt: Int

  """All values less than or equal the given value."""
  amountReturned_lte: Int

  """All values greater than the given value."""
  amountReturned_gt: Int

  """All values greater than or equal the given value."""
  amountReturned_gte: Int
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  dateIssued: DateTime

  """All values that are not equal to given value."""
  dateIssued_not: DateTime

  """All values that are contained in given list."""
  dateIssued_in: [DateTime!]

  """All values that are not contained in given list."""
  dateIssued_not_in: [DateTime!]

  """All values less than the given value."""
  dateIssued_lt: DateTime

  """All values less than or equal the given value."""
  dateIssued_lte: DateTime

  """All values greater than the given value."""
  dateIssued_gt: DateTime

  """All values greater than or equal the given value."""
  dateIssued_gte: DateTime
  dateReported: DateTime

  """All values that are not equal to given value."""
  dateReported_not: DateTime

  """All values that are contained in given list."""
  dateReported_in: [DateTime!]

  """All values that are not contained in given list."""
  dateReported_not_in: [DateTime!]

  """All values less than the given value."""
  dateReported_lt: DateTime

  """All values less than or equal the given value."""
  dateReported_lte: DateTime

  """All values greater than the given value."""
  dateReported_gt: DateTime

  """All values greater than or equal the given value."""
  dateReported_gte: DateTime
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  requestedServicePayment: RequestServiceWhereInput
  repairsRequisitionPayment: RepairsRequisitionWhereInput
  requestedMaterialsPayment: MaterialRequisitionWhereInput
  issuedBy: UserWhereInput
  _MagicalBackRelation_PaymentIssueToVehicleInspection_every: VehicleInspectionWhereInput
  _MagicalBackRelation_PaymentIssueToVehicleInspection_some: VehicleInspectionWhereInput
  _MagicalBackRelation_PaymentIssueToVehicleInspection_none: VehicleInspectionWhereInput
}

input PaymentIssueWhereUniqueInput {
  id: ID
}

type Personnel implements Node {
  id: ID!
  firstName: String!
  lastName: String!
  idNumber: String!
  nssfId: String!
  nhifId: String!
  phoneNumber: String!
  gender: Boolean!
  addressNo: String!
  location: String!
  photoUrl: String!
  highestEducationLevel: String!
  certificatesUrl: String!
  curriculumVitaeUrl: String!
  designation(where: RoleWhereInput): Role!
  dateOfEmployment: DateTime!
  dateOfTermination: DateTime
  currentSalary: String!
  terminationStatus: Boolean!
  reasonsForTermination: String
  projectAssignedTo(where: ProjectWhereInput): Project
  assignedToProject: Boolean!
  sectionsAssigned(where: SectionAssignmentWhereInput, orderBy: SectionAssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SectionAssignment!]
  assignedAccount(where: UserWhereInput): User
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonnelAttendance implements Node {
  id: ID!
  employee(where: PersonnelWhereInput): Personnel!
  inAttendance: Boolean!
  dateOfAttendance: DateTime!
  reportingTime: DateTime!
  exitTime: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type PersonnelAttendanceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonnelAttendanceEdge]!
  aggregate: AggregatePersonnelAttendance!
}

input PersonnelAttendanceCreateInput {
  inAttendance: Boolean!
  dateOfAttendance: DateTime!
  reportingTime: DateTime!
  exitTime: DateTime!
  employee: PersonnelCreateOneInput!
}

"""An edge in a connection."""
type PersonnelAttendanceEdge {
  """The item at the end of the edge."""
  node: PersonnelAttendance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonnelAttendanceOrderByInput {
  id_ASC
  id_DESC
  inAttendance_ASC
  inAttendance_DESC
  dateOfAttendance_ASC
  dateOfAttendance_DESC
  reportingTime_ASC
  reportingTime_DESC
  exitTime_ASC
  exitTime_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PersonnelAttendancePreviousValues {
  id: ID!
  inAttendance: Boolean!
  dateOfAttendance: DateTime!
  reportingTime: DateTime!
  exitTime: DateTime!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonnelAttendanceSubscriptionPayload {
  mutation: MutationType!
  node: PersonnelAttendance
  updatedFields: [String!]
  previousValues: PersonnelAttendancePreviousValues
}

input PersonnelAttendanceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonnelAttendanceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonnelAttendanceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonnelAttendanceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonnelAttendanceWhereInput
}

input PersonnelAttendanceUpdateInput {
  inAttendance: Boolean
  dateOfAttendance: DateTime
  reportingTime: DateTime
  exitTime: DateTime
  employee: PersonnelUpdateOneInput
}

input PersonnelAttendanceWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonnelAttendanceWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonnelAttendanceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonnelAttendanceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  inAttendance: Boolean

  """All values that are not equal to given value."""
  inAttendance_not: Boolean
  dateOfAttendance: DateTime

  """All values that are not equal to given value."""
  dateOfAttendance_not: DateTime

  """All values that are contained in given list."""
  dateOfAttendance_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfAttendance_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfAttendance_lt: DateTime

  """All values less than or equal the given value."""
  dateOfAttendance_lte: DateTime

  """All values greater than the given value."""
  dateOfAttendance_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfAttendance_gte: DateTime
  reportingTime: DateTime

  """All values that are not equal to given value."""
  reportingTime_not: DateTime

  """All values that are contained in given list."""
  reportingTime_in: [DateTime!]

  """All values that are not contained in given list."""
  reportingTime_not_in: [DateTime!]

  """All values less than the given value."""
  reportingTime_lt: DateTime

  """All values less than or equal the given value."""
  reportingTime_lte: DateTime

  """All values greater than the given value."""
  reportingTime_gt: DateTime

  """All values greater than or equal the given value."""
  reportingTime_gte: DateTime
  exitTime: DateTime

  """All values that are not equal to given value."""
  exitTime_not: DateTime

  """All values that are contained in given list."""
  exitTime_in: [DateTime!]

  """All values that are not contained in given list."""
  exitTime_not_in: [DateTime!]

  """All values less than the given value."""
  exitTime_lt: DateTime

  """All values less than or equal the given value."""
  exitTime_lte: DateTime

  """All values greater than the given value."""
  exitTime_gt: DateTime

  """All values greater than or equal the given value."""
  exitTime_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  employee: PersonnelWhereInput
}

input PersonnelAttendanceWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type PersonnelConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PersonnelEdge]!
  aggregate: AggregatePersonnel!
}

input PersonnelCreateInput {
  firstName: String!
  lastName: String!
  idNumber: String!
  nssfId: String!
  nhifId: String!
  phoneNumber: String!
  gender: Boolean
  addressNo: String!
  location: String!
  photoUrl: String!
  highestEducationLevel: String!
  certificatesUrl: String!
  curriculumVitaeUrl: String!
  dateOfEmployment: DateTime!
  dateOfTermination: DateTime
  currentSalary: String!
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  designation: RoleCreateOneWithoutPersonnelsInput!
  projectAssignedTo: ProjectCreateOneInput
  sectionsAssigned: SectionAssignmentCreateManyInput
  assignedAccount: UserCreateOneWithoutPersonnelDetailsInput
}

input PersonnelCreateManyWithoutDesignationInput {
  create: [PersonnelCreateWithoutDesignationInput!]
  connect: [PersonnelWhereUniqueInput!]
}

input PersonnelCreateOneInput {
  create: PersonnelCreateInput
  connect: PersonnelWhereUniqueInput
}

input PersonnelCreateOneWithoutAssignedAccountInput {
  create: PersonnelCreateWithoutAssignedAccountInput
  connect: PersonnelWhereUniqueInput
}

input PersonnelCreateWithoutAssignedAccountInput {
  firstName: String!
  lastName: String!
  idNumber: String!
  nssfId: String!
  nhifId: String!
  phoneNumber: String!
  gender: Boolean
  addressNo: String!
  location: String!
  photoUrl: String!
  highestEducationLevel: String!
  certificatesUrl: String!
  curriculumVitaeUrl: String!
  dateOfEmployment: DateTime!
  dateOfTermination: DateTime
  currentSalary: String!
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  designation: RoleCreateOneWithoutPersonnelsInput!
  projectAssignedTo: ProjectCreateOneInput
  sectionsAssigned: SectionAssignmentCreateManyInput
}

input PersonnelCreateWithoutDesignationInput {
  firstName: String!
  lastName: String!
  idNumber: String!
  nssfId: String!
  nhifId: String!
  phoneNumber: String!
  gender: Boolean
  addressNo: String!
  location: String!
  photoUrl: String!
  highestEducationLevel: String!
  certificatesUrl: String!
  curriculumVitaeUrl: String!
  dateOfEmployment: DateTime!
  dateOfTermination: DateTime
  currentSalary: String!
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  projectAssignedTo: ProjectCreateOneInput
  sectionsAssigned: SectionAssignmentCreateManyInput
  assignedAccount: UserCreateOneWithoutPersonnelDetailsInput
}

"""An edge in a connection."""
type PersonnelEdge {
  """The item at the end of the edge."""
  node: Personnel!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PersonnelOrderByInput {
  id_ASC
  id_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  idNumber_ASC
  idNumber_DESC
  nssfId_ASC
  nssfId_DESC
  nhifId_ASC
  nhifId_DESC
  phoneNumber_ASC
  phoneNumber_DESC
  gender_ASC
  gender_DESC
  addressNo_ASC
  addressNo_DESC
  location_ASC
  location_DESC
  photoUrl_ASC
  photoUrl_DESC
  highestEducationLevel_ASC
  highestEducationLevel_DESC
  certificatesUrl_ASC
  certificatesUrl_DESC
  curriculumVitaeUrl_ASC
  curriculumVitaeUrl_DESC
  dateOfEmployment_ASC
  dateOfEmployment_DESC
  dateOfTermination_ASC
  dateOfTermination_DESC
  currentSalary_ASC
  currentSalary_DESC
  terminationStatus_ASC
  terminationStatus_DESC
  reasonsForTermination_ASC
  reasonsForTermination_DESC
  assignedToProject_ASC
  assignedToProject_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PersonnelPreviousValues {
  id: ID!
  firstName: String!
  lastName: String!
  idNumber: String!
  nssfId: String!
  nhifId: String!
  phoneNumber: String!
  gender: Boolean!
  addressNo: String!
  location: String!
  photoUrl: String!
  highestEducationLevel: String!
  certificatesUrl: String!
  curriculumVitaeUrl: String!
  dateOfEmployment: DateTime!
  dateOfTermination: DateTime
  currentSalary: String!
  terminationStatus: Boolean!
  reasonsForTermination: String
  assignedToProject: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type PersonnelSubscriptionPayload {
  mutation: MutationType!
  node: Personnel
  updatedFields: [String!]
  previousValues: PersonnelPreviousValues
}

input PersonnelSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonnelSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonnelSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonnelSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PersonnelWhereInput
}

input PersonnelUpdateDataInput {
  firstName: String
  lastName: String
  idNumber: String
  nssfId: String
  nhifId: String
  phoneNumber: String
  gender: Boolean
  addressNo: String
  location: String
  photoUrl: String
  highestEducationLevel: String
  certificatesUrl: String
  curriculumVitaeUrl: String
  dateOfEmployment: DateTime
  dateOfTermination: DateTime
  currentSalary: String
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  designation: RoleUpdateOneWithoutPersonnelsInput
  projectAssignedTo: ProjectUpdateOneInput
  sectionsAssigned: SectionAssignmentUpdateManyInput
  assignedAccount: UserUpdateOneWithoutPersonnelDetailsInput
}

input PersonnelUpdateInput {
  firstName: String
  lastName: String
  idNumber: String
  nssfId: String
  nhifId: String
  phoneNumber: String
  gender: Boolean
  addressNo: String
  location: String
  photoUrl: String
  highestEducationLevel: String
  certificatesUrl: String
  curriculumVitaeUrl: String
  dateOfEmployment: DateTime
  dateOfTermination: DateTime
  currentSalary: String
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  designation: RoleUpdateOneWithoutPersonnelsInput
  projectAssignedTo: ProjectUpdateOneInput
  sectionsAssigned: SectionAssignmentUpdateManyInput
  assignedAccount: UserUpdateOneWithoutPersonnelDetailsInput
}

input PersonnelUpdateManyWithoutDesignationInput {
  create: [PersonnelCreateWithoutDesignationInput!]
  connect: [PersonnelWhereUniqueInput!]
  disconnect: [PersonnelWhereUniqueInput!]
  delete: [PersonnelWhereUniqueInput!]
  update: [PersonnelUpdateWithWhereUniqueWithoutDesignationInput!]
  upsert: [PersonnelUpsertWithWhereUniqueWithoutDesignationInput!]
}

input PersonnelUpdateOneInput {
  create: PersonnelCreateInput
  connect: PersonnelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonnelUpdateDataInput
  upsert: PersonnelUpsertNestedInput
}

input PersonnelUpdateOneWithoutAssignedAccountInput {
  create: PersonnelCreateWithoutAssignedAccountInput
  connect: PersonnelWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PersonnelUpdateWithoutAssignedAccountDataInput
  upsert: PersonnelUpsertWithoutAssignedAccountInput
}

input PersonnelUpdateWithoutAssignedAccountDataInput {
  firstName: String
  lastName: String
  idNumber: String
  nssfId: String
  nhifId: String
  phoneNumber: String
  gender: Boolean
  addressNo: String
  location: String
  photoUrl: String
  highestEducationLevel: String
  certificatesUrl: String
  curriculumVitaeUrl: String
  dateOfEmployment: DateTime
  dateOfTermination: DateTime
  currentSalary: String
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  designation: RoleUpdateOneWithoutPersonnelsInput
  projectAssignedTo: ProjectUpdateOneInput
  sectionsAssigned: SectionAssignmentUpdateManyInput
}

input PersonnelUpdateWithoutDesignationDataInput {
  firstName: String
  lastName: String
  idNumber: String
  nssfId: String
  nhifId: String
  phoneNumber: String
  gender: Boolean
  addressNo: String
  location: String
  photoUrl: String
  highestEducationLevel: String
  certificatesUrl: String
  curriculumVitaeUrl: String
  dateOfEmployment: DateTime
  dateOfTermination: DateTime
  currentSalary: String
  terminationStatus: Boolean
  reasonsForTermination: String
  assignedToProject: Boolean
  projectAssignedTo: ProjectUpdateOneInput
  sectionsAssigned: SectionAssignmentUpdateManyInput
  assignedAccount: UserUpdateOneWithoutPersonnelDetailsInput
}

input PersonnelUpdateWithWhereUniqueWithoutDesignationInput {
  where: PersonnelWhereUniqueInput!
  data: PersonnelUpdateWithoutDesignationDataInput!
}

input PersonnelUpsertNestedInput {
  update: PersonnelUpdateDataInput!
  create: PersonnelCreateInput!
}

input PersonnelUpsertWithoutAssignedAccountInput {
  update: PersonnelUpdateWithoutAssignedAccountDataInput!
  create: PersonnelCreateWithoutAssignedAccountInput!
}

input PersonnelUpsertWithWhereUniqueWithoutDesignationInput {
  where: PersonnelWhereUniqueInput!
  update: PersonnelUpdateWithoutDesignationDataInput!
  create: PersonnelCreateWithoutDesignationInput!
}

input PersonnelWhereInput {
  """Logical AND on all given filters."""
  AND: [PersonnelWhereInput!]

  """Logical OR on all given filters."""
  OR: [PersonnelWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PersonnelWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  idNumber: String

  """All values that are not equal to given value."""
  idNumber_not: String

  """All values that are contained in given list."""
  idNumber_in: [String!]

  """All values that are not contained in given list."""
  idNumber_not_in: [String!]

  """All values less than the given value."""
  idNumber_lt: String

  """All values less than or equal the given value."""
  idNumber_lte: String

  """All values greater than the given value."""
  idNumber_gt: String

  """All values greater than or equal the given value."""
  idNumber_gte: String

  """All values containing the given string."""
  idNumber_contains: String

  """All values not containing the given string."""
  idNumber_not_contains: String

  """All values starting with the given string."""
  idNumber_starts_with: String

  """All values not starting with the given string."""
  idNumber_not_starts_with: String

  """All values ending with the given string."""
  idNumber_ends_with: String

  """All values not ending with the given string."""
  idNumber_not_ends_with: String
  nssfId: String

  """All values that are not equal to given value."""
  nssfId_not: String

  """All values that are contained in given list."""
  nssfId_in: [String!]

  """All values that are not contained in given list."""
  nssfId_not_in: [String!]

  """All values less than the given value."""
  nssfId_lt: String

  """All values less than or equal the given value."""
  nssfId_lte: String

  """All values greater than the given value."""
  nssfId_gt: String

  """All values greater than or equal the given value."""
  nssfId_gte: String

  """All values containing the given string."""
  nssfId_contains: String

  """All values not containing the given string."""
  nssfId_not_contains: String

  """All values starting with the given string."""
  nssfId_starts_with: String

  """All values not starting with the given string."""
  nssfId_not_starts_with: String

  """All values ending with the given string."""
  nssfId_ends_with: String

  """All values not ending with the given string."""
  nssfId_not_ends_with: String
  nhifId: String

  """All values that are not equal to given value."""
  nhifId_not: String

  """All values that are contained in given list."""
  nhifId_in: [String!]

  """All values that are not contained in given list."""
  nhifId_not_in: [String!]

  """All values less than the given value."""
  nhifId_lt: String

  """All values less than or equal the given value."""
  nhifId_lte: String

  """All values greater than the given value."""
  nhifId_gt: String

  """All values greater than or equal the given value."""
  nhifId_gte: String

  """All values containing the given string."""
  nhifId_contains: String

  """All values not containing the given string."""
  nhifId_not_contains: String

  """All values starting with the given string."""
  nhifId_starts_with: String

  """All values not starting with the given string."""
  nhifId_not_starts_with: String

  """All values ending with the given string."""
  nhifId_ends_with: String

  """All values not ending with the given string."""
  nhifId_not_ends_with: String
  phoneNumber: String

  """All values that are not equal to given value."""
  phoneNumber_not: String

  """All values that are contained in given list."""
  phoneNumber_in: [String!]

  """All values that are not contained in given list."""
  phoneNumber_not_in: [String!]

  """All values less than the given value."""
  phoneNumber_lt: String

  """All values less than or equal the given value."""
  phoneNumber_lte: String

  """All values greater than the given value."""
  phoneNumber_gt: String

  """All values greater than or equal the given value."""
  phoneNumber_gte: String

  """All values containing the given string."""
  phoneNumber_contains: String

  """All values not containing the given string."""
  phoneNumber_not_contains: String

  """All values starting with the given string."""
  phoneNumber_starts_with: String

  """All values not starting with the given string."""
  phoneNumber_not_starts_with: String

  """All values ending with the given string."""
  phoneNumber_ends_with: String

  """All values not ending with the given string."""
  phoneNumber_not_ends_with: String
  gender: Boolean

  """All values that are not equal to given value."""
  gender_not: Boolean
  addressNo: String

  """All values that are not equal to given value."""
  addressNo_not: String

  """All values that are contained in given list."""
  addressNo_in: [String!]

  """All values that are not contained in given list."""
  addressNo_not_in: [String!]

  """All values less than the given value."""
  addressNo_lt: String

  """All values less than or equal the given value."""
  addressNo_lte: String

  """All values greater than the given value."""
  addressNo_gt: String

  """All values greater than or equal the given value."""
  addressNo_gte: String

  """All values containing the given string."""
  addressNo_contains: String

  """All values not containing the given string."""
  addressNo_not_contains: String

  """All values starting with the given string."""
  addressNo_starts_with: String

  """All values not starting with the given string."""
  addressNo_not_starts_with: String

  """All values ending with the given string."""
  addressNo_ends_with: String

  """All values not ending with the given string."""
  addressNo_not_ends_with: String
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  photoUrl: String

  """All values that are not equal to given value."""
  photoUrl_not: String

  """All values that are contained in given list."""
  photoUrl_in: [String!]

  """All values that are not contained in given list."""
  photoUrl_not_in: [String!]

  """All values less than the given value."""
  photoUrl_lt: String

  """All values less than or equal the given value."""
  photoUrl_lte: String

  """All values greater than the given value."""
  photoUrl_gt: String

  """All values greater than or equal the given value."""
  photoUrl_gte: String

  """All values containing the given string."""
  photoUrl_contains: String

  """All values not containing the given string."""
  photoUrl_not_contains: String

  """All values starting with the given string."""
  photoUrl_starts_with: String

  """All values not starting with the given string."""
  photoUrl_not_starts_with: String

  """All values ending with the given string."""
  photoUrl_ends_with: String

  """All values not ending with the given string."""
  photoUrl_not_ends_with: String
  highestEducationLevel: String

  """All values that are not equal to given value."""
  highestEducationLevel_not: String

  """All values that are contained in given list."""
  highestEducationLevel_in: [String!]

  """All values that are not contained in given list."""
  highestEducationLevel_not_in: [String!]

  """All values less than the given value."""
  highestEducationLevel_lt: String

  """All values less than or equal the given value."""
  highestEducationLevel_lte: String

  """All values greater than the given value."""
  highestEducationLevel_gt: String

  """All values greater than or equal the given value."""
  highestEducationLevel_gte: String

  """All values containing the given string."""
  highestEducationLevel_contains: String

  """All values not containing the given string."""
  highestEducationLevel_not_contains: String

  """All values starting with the given string."""
  highestEducationLevel_starts_with: String

  """All values not starting with the given string."""
  highestEducationLevel_not_starts_with: String

  """All values ending with the given string."""
  highestEducationLevel_ends_with: String

  """All values not ending with the given string."""
  highestEducationLevel_not_ends_with: String
  certificatesUrl: String

  """All values that are not equal to given value."""
  certificatesUrl_not: String

  """All values that are contained in given list."""
  certificatesUrl_in: [String!]

  """All values that are not contained in given list."""
  certificatesUrl_not_in: [String!]

  """All values less than the given value."""
  certificatesUrl_lt: String

  """All values less than or equal the given value."""
  certificatesUrl_lte: String

  """All values greater than the given value."""
  certificatesUrl_gt: String

  """All values greater than or equal the given value."""
  certificatesUrl_gte: String

  """All values containing the given string."""
  certificatesUrl_contains: String

  """All values not containing the given string."""
  certificatesUrl_not_contains: String

  """All values starting with the given string."""
  certificatesUrl_starts_with: String

  """All values not starting with the given string."""
  certificatesUrl_not_starts_with: String

  """All values ending with the given string."""
  certificatesUrl_ends_with: String

  """All values not ending with the given string."""
  certificatesUrl_not_ends_with: String
  curriculumVitaeUrl: String

  """All values that are not equal to given value."""
  curriculumVitaeUrl_not: String

  """All values that are contained in given list."""
  curriculumVitaeUrl_in: [String!]

  """All values that are not contained in given list."""
  curriculumVitaeUrl_not_in: [String!]

  """All values less than the given value."""
  curriculumVitaeUrl_lt: String

  """All values less than or equal the given value."""
  curriculumVitaeUrl_lte: String

  """All values greater than the given value."""
  curriculumVitaeUrl_gt: String

  """All values greater than or equal the given value."""
  curriculumVitaeUrl_gte: String

  """All values containing the given string."""
  curriculumVitaeUrl_contains: String

  """All values not containing the given string."""
  curriculumVitaeUrl_not_contains: String

  """All values starting with the given string."""
  curriculumVitaeUrl_starts_with: String

  """All values not starting with the given string."""
  curriculumVitaeUrl_not_starts_with: String

  """All values ending with the given string."""
  curriculumVitaeUrl_ends_with: String

  """All values not ending with the given string."""
  curriculumVitaeUrl_not_ends_with: String
  dateOfEmployment: DateTime

  """All values that are not equal to given value."""
  dateOfEmployment_not: DateTime

  """All values that are contained in given list."""
  dateOfEmployment_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfEmployment_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfEmployment_lt: DateTime

  """All values less than or equal the given value."""
  dateOfEmployment_lte: DateTime

  """All values greater than the given value."""
  dateOfEmployment_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfEmployment_gte: DateTime
  dateOfTermination: DateTime

  """All values that are not equal to given value."""
  dateOfTermination_not: DateTime

  """All values that are contained in given list."""
  dateOfTermination_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfTermination_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfTermination_lt: DateTime

  """All values less than or equal the given value."""
  dateOfTermination_lte: DateTime

  """All values greater than the given value."""
  dateOfTermination_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfTermination_gte: DateTime
  currentSalary: String

  """All values that are not equal to given value."""
  currentSalary_not: String

  """All values that are contained in given list."""
  currentSalary_in: [String!]

  """All values that are not contained in given list."""
  currentSalary_not_in: [String!]

  """All values less than the given value."""
  currentSalary_lt: String

  """All values less than or equal the given value."""
  currentSalary_lte: String

  """All values greater than the given value."""
  currentSalary_gt: String

  """All values greater than or equal the given value."""
  currentSalary_gte: String

  """All values containing the given string."""
  currentSalary_contains: String

  """All values not containing the given string."""
  currentSalary_not_contains: String

  """All values starting with the given string."""
  currentSalary_starts_with: String

  """All values not starting with the given string."""
  currentSalary_not_starts_with: String

  """All values ending with the given string."""
  currentSalary_ends_with: String

  """All values not ending with the given string."""
  currentSalary_not_ends_with: String
  terminationStatus: Boolean

  """All values that are not equal to given value."""
  terminationStatus_not: Boolean
  reasonsForTermination: String

  """All values that are not equal to given value."""
  reasonsForTermination_not: String

  """All values that are contained in given list."""
  reasonsForTermination_in: [String!]

  """All values that are not contained in given list."""
  reasonsForTermination_not_in: [String!]

  """All values less than the given value."""
  reasonsForTermination_lt: String

  """All values less than or equal the given value."""
  reasonsForTermination_lte: String

  """All values greater than the given value."""
  reasonsForTermination_gt: String

  """All values greater than or equal the given value."""
  reasonsForTermination_gte: String

  """All values containing the given string."""
  reasonsForTermination_contains: String

  """All values not containing the given string."""
  reasonsForTermination_not_contains: String

  """All values starting with the given string."""
  reasonsForTermination_starts_with: String

  """All values not starting with the given string."""
  reasonsForTermination_not_starts_with: String

  """All values ending with the given string."""
  reasonsForTermination_ends_with: String

  """All values not ending with the given string."""
  reasonsForTermination_not_ends_with: String
  assignedToProject: Boolean

  """All values that are not equal to given value."""
  assignedToProject_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  designation: RoleWhereInput
  projectAssignedTo: ProjectWhereInput
  sectionsAssigned_every: SectionAssignmentWhereInput
  sectionsAssigned_some: SectionAssignmentWhereInput
  sectionsAssigned_none: SectionAssignmentWhereInput
  assignedAccount: UserWhereInput
  _MagicalBackRelation_PersonnelAssignedSectionss_every: SectionAssignmentWhereInput
  _MagicalBackRelation_PersonnelAssignedSectionss_some: SectionAssignmentWhereInput
  _MagicalBackRelation_PersonnelAssignedSectionss_none: SectionAssignmentWhereInput
  _MagicalBackRelation_PersonnelToPersonnelAttendance_every: PersonnelAttendanceWhereInput
  _MagicalBackRelation_PersonnelToPersonnelAttendance_some: PersonnelAttendanceWhereInput
  _MagicalBackRelation_PersonnelToPersonnelAttendance_none: PersonnelAttendanceWhereInput
  _MagicalBackRelation_PersonnelToVehicle_every: VehicleWhereInput
  _MagicalBackRelation_PersonnelToVehicle_some: VehicleWhereInput
  _MagicalBackRelation_PersonnelToVehicle_none: VehicleWhereInput
  _MagicalBackRelation_DriverToPersonnel_every: DriverWhereInput
  _MagicalBackRelation_DriverToPersonnel_some: DriverWhereInput
  _MagicalBackRelation_DriverToPersonnel_none: DriverWhereInput
  _MagicalBackRelation_PersonnelToVehicleAssignment_every: VehicleAssignmentWhereInput
  _MagicalBackRelation_PersonnelToVehicleAssignment_some: VehicleAssignmentWhereInput
  _MagicalBackRelation_PersonnelToVehicleAssignment_none: VehicleAssignmentWhereInput
}

input PersonnelWhereUniqueInput {
  id: ID
  idNumber: String
  nssfId: String
  nhifId: String
}

type Post implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
  author(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
  author: UserCreateOneInput!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
}

type PostPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
  author: UserUpdateOneInput
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  author: UserWhereInput
}

input PostWhereUniqueInput {
  id: ID
}

type Project implements Node {
  id: ID!
  projectName: String!
  projectDescription: String!
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String!
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section!]
  createdAt: DateTime!
  updatedAt: DateTime!
  materials(where: StoreTransactionWhereInput): StoreTransaction
}

"""A connection to a list of items."""
type ProjectConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ProjectEdge]!
  aggregate: AggregateProject!
}

input ProjectCreateInput {
  projectName: String!
  projectDescription: String!
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String!
  sections: SectionCreateManyWithoutSectionProjectInput
  materials: StoreTransactionCreateOneWithoutMaterialsIssuedToInput
}

input ProjectCreateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutMaterialsInput {
  create: ProjectCreateWithoutMaterialsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateOneWithoutSectionsInput {
  create: ProjectCreateWithoutSectionsInput
  connect: ProjectWhereUniqueInput
}

input ProjectCreateWithoutMaterialsInput {
  projectName: String!
  projectDescription: String!
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String!
  sections: SectionCreateManyWithoutSectionProjectInput
}

input ProjectCreateWithoutSectionsInput {
  projectName: String!
  projectDescription: String!
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String!
  materials: StoreTransactionCreateOneWithoutMaterialsIssuedToInput
}

"""An edge in a connection."""
type ProjectEdge {
  """The item at the end of the edge."""
  node: Project!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ProjectOrderByInput {
  id_ASC
  id_DESC
  projectName_ASC
  projectName_DESC
  projectDescription_ASC
  projectDescription_DESC
  projectValuation_ASC
  projectValuation_DESC
  projectStartDate_ASC
  projectStartDate_DESC
  projectCompletionDate_ASC
  projectCompletionDate_DESC
  projectLocation_ASC
  projectLocation_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ProjectPreviousValues {
  id: ID!
  projectName: String!
  projectDescription: String!
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ProjectSubscriptionPayload {
  mutation: MutationType!
  node: Project
  updatedFields: [String!]
  previousValues: ProjectPreviousValues
}

input ProjectSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ProjectWhereInput
}

input ProjectUpdateDataInput {
  projectName: String
  projectDescription: String
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String
  sections: SectionUpdateManyWithoutSectionProjectInput
  materials: StoreTransactionUpdateOneWithoutMaterialsIssuedToInput
}

input ProjectUpdateInput {
  projectName: String
  projectDescription: String
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String
  sections: SectionUpdateManyWithoutSectionProjectInput
  materials: StoreTransactionUpdateOneWithoutMaterialsIssuedToInput
}

input ProjectUpdateOneInput {
  create: ProjectCreateInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateDataInput
  upsert: ProjectUpsertNestedInput
}

input ProjectUpdateOneWithoutMaterialsInput {
  create: ProjectCreateWithoutMaterialsInput
  connect: ProjectWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: ProjectUpdateWithoutMaterialsDataInput
  upsert: ProjectUpsertWithoutMaterialsInput
}

input ProjectUpdateOneWithoutSectionsInput {
  create: ProjectCreateWithoutSectionsInput
  connect: ProjectWhereUniqueInput
  delete: Boolean
  update: ProjectUpdateWithoutSectionsDataInput
  upsert: ProjectUpsertWithoutSectionsInput
}

input ProjectUpdateWithoutMaterialsDataInput {
  projectName: String
  projectDescription: String
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String
  sections: SectionUpdateManyWithoutSectionProjectInput
}

input ProjectUpdateWithoutSectionsDataInput {
  projectName: String
  projectDescription: String
  projectValuation: Int
  projectStartDate: DateTime
  projectCompletionDate: DateTime
  projectLocation: String
  materials: StoreTransactionUpdateOneWithoutMaterialsIssuedToInput
}

input ProjectUpsertNestedInput {
  update: ProjectUpdateDataInput!
  create: ProjectCreateInput!
}

input ProjectUpsertWithoutMaterialsInput {
  update: ProjectUpdateWithoutMaterialsDataInput!
  create: ProjectCreateWithoutMaterialsInput!
}

input ProjectUpsertWithoutSectionsInput {
  update: ProjectUpdateWithoutSectionsDataInput!
  create: ProjectCreateWithoutSectionsInput!
}

input ProjectWhereInput {
  """Logical AND on all given filters."""
  AND: [ProjectWhereInput!]

  """Logical OR on all given filters."""
  OR: [ProjectWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ProjectWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  projectName: String

  """All values that are not equal to given value."""
  projectName_not: String

  """All values that are contained in given list."""
  projectName_in: [String!]

  """All values that are not contained in given list."""
  projectName_not_in: [String!]

  """All values less than the given value."""
  projectName_lt: String

  """All values less than or equal the given value."""
  projectName_lte: String

  """All values greater than the given value."""
  projectName_gt: String

  """All values greater than or equal the given value."""
  projectName_gte: String

  """All values containing the given string."""
  projectName_contains: String

  """All values not containing the given string."""
  projectName_not_contains: String

  """All values starting with the given string."""
  projectName_starts_with: String

  """All values not starting with the given string."""
  projectName_not_starts_with: String

  """All values ending with the given string."""
  projectName_ends_with: String

  """All values not ending with the given string."""
  projectName_not_ends_with: String
  projectDescription: String

  """All values that are not equal to given value."""
  projectDescription_not: String

  """All values that are contained in given list."""
  projectDescription_in: [String!]

  """All values that are not contained in given list."""
  projectDescription_not_in: [String!]

  """All values less than the given value."""
  projectDescription_lt: String

  """All values less than or equal the given value."""
  projectDescription_lte: String

  """All values greater than the given value."""
  projectDescription_gt: String

  """All values greater than or equal the given value."""
  projectDescription_gte: String

  """All values containing the given string."""
  projectDescription_contains: String

  """All values not containing the given string."""
  projectDescription_not_contains: String

  """All values starting with the given string."""
  projectDescription_starts_with: String

  """All values not starting with the given string."""
  projectDescription_not_starts_with: String

  """All values ending with the given string."""
  projectDescription_ends_with: String

  """All values not ending with the given string."""
  projectDescription_not_ends_with: String
  projectValuation: Int

  """All values that are not equal to given value."""
  projectValuation_not: Int

  """All values that are contained in given list."""
  projectValuation_in: [Int!]

  """All values that are not contained in given list."""
  projectValuation_not_in: [Int!]

  """All values less than the given value."""
  projectValuation_lt: Int

  """All values less than or equal the given value."""
  projectValuation_lte: Int

  """All values greater than the given value."""
  projectValuation_gt: Int

  """All values greater than or equal the given value."""
  projectValuation_gte: Int
  projectStartDate: DateTime

  """All values that are not equal to given value."""
  projectStartDate_not: DateTime

  """All values that are contained in given list."""
  projectStartDate_in: [DateTime!]

  """All values that are not contained in given list."""
  projectStartDate_not_in: [DateTime!]

  """All values less than the given value."""
  projectStartDate_lt: DateTime

  """All values less than or equal the given value."""
  projectStartDate_lte: DateTime

  """All values greater than the given value."""
  projectStartDate_gt: DateTime

  """All values greater than or equal the given value."""
  projectStartDate_gte: DateTime
  projectCompletionDate: DateTime

  """All values that are not equal to given value."""
  projectCompletionDate_not: DateTime

  """All values that are contained in given list."""
  projectCompletionDate_in: [DateTime!]

  """All values that are not contained in given list."""
  projectCompletionDate_not_in: [DateTime!]

  """All values less than the given value."""
  projectCompletionDate_lt: DateTime

  """All values less than or equal the given value."""
  projectCompletionDate_lte: DateTime

  """All values greater than the given value."""
  projectCompletionDate_gt: DateTime

  """All values greater than or equal the given value."""
  projectCompletionDate_gte: DateTime
  projectLocation: String

  """All values that are not equal to given value."""
  projectLocation_not: String

  """All values that are contained in given list."""
  projectLocation_in: [String!]

  """All values that are not contained in given list."""
  projectLocation_not_in: [String!]

  """All values less than the given value."""
  projectLocation_lt: String

  """All values less than or equal the given value."""
  projectLocation_lte: String

  """All values greater than the given value."""
  projectLocation_gt: String

  """All values greater than or equal the given value."""
  projectLocation_gte: String

  """All values containing the given string."""
  projectLocation_contains: String

  """All values not containing the given string."""
  projectLocation_not_contains: String

  """All values starting with the given string."""
  projectLocation_starts_with: String

  """All values not starting with the given string."""
  projectLocation_not_starts_with: String

  """All values ending with the given string."""
  projectLocation_ends_with: String

  """All values not ending with the given string."""
  projectLocation_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  sections_every: SectionWhereInput
  sections_some: SectionWhereInput
  sections_none: SectionWhereInput
  materials: StoreTransactionWhereInput
  _MagicalBackRelation_ProjectToSectionAssignment_every: SectionAssignmentWhereInput
  _MagicalBackRelation_ProjectToSectionAssignment_some: SectionAssignmentWhereInput
  _MagicalBackRelation_ProjectToSectionAssignment_none: SectionAssignmentWhereInput
  _MagicalBackRelation_PersonnelToProject_every: PersonnelWhereInput
  _MagicalBackRelation_PersonnelToProject_some: PersonnelWhereInput
  _MagicalBackRelation_PersonnelToProject_none: PersonnelWhereInput
}

input ProjectWhereUniqueInput {
  id: ID
}

type Query {
  vehicleOwners(where: VehicleOwnerWhereInput, orderBy: VehicleOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleOwner]!
  drivers(where: DriverWhereInput, orderBy: DriverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Driver]!
  vehicleRequisitions(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleRequisition]!
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  roles(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Role]!
  vehicleAssignments(where: VehicleAssignmentWhereInput, orderBy: VehicleAssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleAssignment]!
  serviceRequisitions(where: ServiceRequisitionWhereInput, orderBy: ServiceRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ServiceRequisition]!
  personnelAttendances(where: PersonnelAttendanceWhereInput, orderBy: PersonnelAttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PersonnelAttendance]!
  requestServices(where: RequestServiceWhereInput, orderBy: RequestServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestService]!
  repairsRequisitions(where: RepairsRequisitionWhereInput, orderBy: RepairsRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RepairsRequisition]!
  vehicleInspections(where: VehicleInspectionWhereInput, orderBy: VehicleInspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleInspection]!
  materialRequisitions(where: MaterialRequisitionWhereInput, orderBy: MaterialRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MaterialRequisition]!
  otherPaymentIssues(where: OtherPaymentIssueWhereInput, orderBy: OtherPaymentIssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OtherPaymentIssue]!
  storeBalances(where: StoreBalanceWhereInput, orderBy: StoreBalanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoreBalance]!
  storeTransactions(where: StoreTransactionWhereInput, orderBy: StoreTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoreTransaction]!
  paymentIssues(where: PaymentIssueWhereInput, orderBy: PaymentIssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentIssue]!
  sections(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Section]!
  sectionAssignments(where: SectionAssignmentWhereInput, orderBy: SectionAssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [SectionAssignment]!
  suppliers(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Supplier]!
  projects(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Project]!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle]!
  personnels(where: PersonnelWhereInput, orderBy: PersonnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Personnel]!
  materialsCostings(where: MaterialsCostingWhereInput, orderBy: MaterialsCostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MaterialsCosting]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  vehicleOwner(where: VehicleOwnerWhereUniqueInput!): VehicleOwner
  driver(where: DriverWhereUniqueInput!): Driver
  vehicleRequisition(where: VehicleRequisitionWhereUniqueInput!): VehicleRequisition
  post(where: PostWhereUniqueInput!): Post
  role(where: RoleWhereUniqueInput!): Role
  vehicleAssignment(where: VehicleAssignmentWhereUniqueInput!): VehicleAssignment
  serviceRequisition(where: ServiceRequisitionWhereUniqueInput!): ServiceRequisition
  personnelAttendance(where: PersonnelAttendanceWhereUniqueInput!): PersonnelAttendance
  requestService(where: RequestServiceWhereUniqueInput!): RequestService
  repairsRequisition(where: RepairsRequisitionWhereUniqueInput!): RepairsRequisition
  vehicleInspection(where: VehicleInspectionWhereUniqueInput!): VehicleInspection
  materialRequisition(where: MaterialRequisitionWhereUniqueInput!): MaterialRequisition
  otherPaymentIssue(where: OtherPaymentIssueWhereUniqueInput!): OtherPaymentIssue
  storeBalance(where: StoreBalanceWhereUniqueInput!): StoreBalance
  storeTransaction(where: StoreTransactionWhereUniqueInput!): StoreTransaction
  paymentIssue(where: PaymentIssueWhereUniqueInput!): PaymentIssue
  section(where: SectionWhereUniqueInput!): Section
  sectionAssignment(where: SectionAssignmentWhereUniqueInput!): SectionAssignment
  supplier(where: SupplierWhereUniqueInput!): Supplier
  project(where: ProjectWhereUniqueInput!): Project
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  personnel(where: PersonnelWhereUniqueInput!): Personnel
  materialsCosting(where: MaterialsCostingWhereUniqueInput!): MaterialsCosting
  user(where: UserWhereUniqueInput!): User
  vehicleOwnersConnection(where: VehicleOwnerWhereInput, orderBy: VehicleOwnerOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleOwnerConnection!
  driversConnection(where: DriverWhereInput, orderBy: DriverOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): DriverConnection!
  vehicleRequisitionsConnection(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleRequisitionConnection!
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  rolesConnection(where: RoleWhereInput, orderBy: RoleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RoleConnection!
  vehicleAssignmentsConnection(where: VehicleAssignmentWhereInput, orderBy: VehicleAssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleAssignmentConnection!
  serviceRequisitionsConnection(where: ServiceRequisitionWhereInput, orderBy: ServiceRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ServiceRequisitionConnection!
  personnelAttendancesConnection(where: PersonnelAttendanceWhereInput, orderBy: PersonnelAttendanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonnelAttendanceConnection!
  requestServicesConnection(where: RequestServiceWhereInput, orderBy: RequestServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RequestServiceConnection!
  repairsRequisitionsConnection(where: RepairsRequisitionWhereInput, orderBy: RepairsRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RepairsRequisitionConnection!
  vehicleInspectionsConnection(where: VehicleInspectionWhereInput, orderBy: VehicleInspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleInspectionConnection!
  materialRequisitionsConnection(where: MaterialRequisitionWhereInput, orderBy: MaterialRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MaterialRequisitionConnection!
  otherPaymentIssuesConnection(where: OtherPaymentIssueWhereInput, orderBy: OtherPaymentIssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OtherPaymentIssueConnection!
  storeBalancesConnection(where: StoreBalanceWhereInput, orderBy: StoreBalanceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoreBalanceConnection!
  storeTransactionsConnection(where: StoreTransactionWhereInput, orderBy: StoreTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StoreTransactionConnection!
  paymentIssuesConnection(where: PaymentIssueWhereInput, orderBy: PaymentIssueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentIssueConnection!
  sectionsConnection(where: SectionWhereInput, orderBy: SectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionConnection!
  sectionAssignmentsConnection(where: SectionAssignmentWhereInput, orderBy: SectionAssignmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SectionAssignmentConnection!
  suppliersConnection(where: SupplierWhereInput, orderBy: SupplierOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SupplierConnection!
  projectsConnection(where: ProjectWhereInput, orderBy: ProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ProjectConnection!
  vehiclesConnection(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): VehicleConnection!
  personnelsConnection(where: PersonnelWhereInput, orderBy: PersonnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PersonnelConnection!
  materialsCostingsConnection(where: MaterialsCostingWhereInput, orderBy: MaterialsCostingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MaterialsCostingConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RepairsRequisition implements Node {
  id: ID!
  requestedBy(where: UserWhereInput): User
  vehicleToBeRepaired(where: VehicleWhereInput): Vehicle!
  approxCostOfRepair: Int
  otherDetails: String
  requestApprovedBy(where: UserWhereInput): User
  approvalStatus: Boolean!
  approvalDate: DateTime
  issuedCash: Boolean
  paymentsDetails(where: PaymentIssueWhereInput): PaymentIssue
  createdAt: DateTime!
  dateServiced: DateTime
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type RepairsRequisitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RepairsRequisitionEdge]!
  aggregate: AggregateRepairsRequisition!
}

input RepairsRequisitionCreateInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserCreateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleCreateOneWithoutRepairsInput!
  requestApprovedBy: UserCreateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionCreateManyWithoutRequestApprovedByInput {
  create: [RepairsRequisitionCreateWithoutRequestApprovedByInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
}

input RepairsRequisitionCreateManyWithoutRequestedByInput {
  create: [RepairsRequisitionCreateWithoutRequestedByInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
}

input RepairsRequisitionCreateManyWithoutVehicleToBeRepairedInput {
  create: [RepairsRequisitionCreateWithoutVehicleToBeRepairedInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
}

input RepairsRequisitionCreateOneWithoutPaymentsDetailsInput {
  create: RepairsRequisitionCreateWithoutPaymentsDetailsInput
  connect: RepairsRequisitionWhereUniqueInput
}

input RepairsRequisitionCreateWithoutPaymentsDetailsInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserCreateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleCreateOneWithoutRepairsInput!
  requestApprovedBy: UserCreateOneWithoutApprovedRepairsRequestsInput
}

input RepairsRequisitionCreateWithoutRequestApprovedByInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserCreateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleCreateOneWithoutRepairsInput!
  paymentsDetails: PaymentIssueCreateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionCreateWithoutRequestedByInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  vehicleToBeRepaired: VehicleCreateOneWithoutRepairsInput!
  requestApprovedBy: UserCreateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionCreateWithoutVehicleToBeRepairedInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserCreateOneWithoutInitiatedRepairsRequestsInput
  requestApprovedBy: UserCreateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRepairsRequisitionPaymentInput
}

"""An edge in a connection."""
type RepairsRequisitionEdge {
  """The item at the end of the edge."""
  node: RepairsRequisition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RepairsRequisitionOrderByInput {
  id_ASC
  id_DESC
  approxCostOfRepair_ASC
  approxCostOfRepair_DESC
  otherDetails_ASC
  otherDetails_DESC
  approvalStatus_ASC
  approvalStatus_DESC
  approvalDate_ASC
  approvalDate_DESC
  issuedCash_ASC
  issuedCash_DESC
  createdAt_ASC
  createdAt_DESC
  dateServiced_ASC
  dateServiced_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RepairsRequisitionPreviousValues {
  id: ID!
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean!
  approvalDate: DateTime
  issuedCash: Boolean
  createdAt: DateTime!
  dateServiced: DateTime
  updatedAt: DateTime!
}

type RepairsRequisitionSubscriptionPayload {
  mutation: MutationType!
  node: RepairsRequisition
  updatedFields: [String!]
  previousValues: RepairsRequisitionPreviousValues
}

input RepairsRequisitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RepairsRequisitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RepairsRequisitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RepairsRequisitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RepairsRequisitionWhereInput
}

input RepairsRequisitionUpdateInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleUpdateOneWithoutRepairsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionUpdateManyWithoutRequestApprovedByInput {
  create: [RepairsRequisitionCreateWithoutRequestApprovedByInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
  disconnect: [RepairsRequisitionWhereUniqueInput!]
  delete: [RepairsRequisitionWhereUniqueInput!]
  update: [RepairsRequisitionUpdateWithWhereUniqueWithoutRequestApprovedByInput!]
  upsert: [RepairsRequisitionUpsertWithWhereUniqueWithoutRequestApprovedByInput!]
}

input RepairsRequisitionUpdateManyWithoutRequestedByInput {
  create: [RepairsRequisitionCreateWithoutRequestedByInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
  disconnect: [RepairsRequisitionWhereUniqueInput!]
  delete: [RepairsRequisitionWhereUniqueInput!]
  update: [RepairsRequisitionUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [RepairsRequisitionUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput {
  create: [RepairsRequisitionCreateWithoutVehicleToBeRepairedInput!]
  connect: [RepairsRequisitionWhereUniqueInput!]
  disconnect: [RepairsRequisitionWhereUniqueInput!]
  delete: [RepairsRequisitionWhereUniqueInput!]
  update: [RepairsRequisitionUpdateWithWhereUniqueWithoutVehicleToBeRepairedInput!]
  upsert: [RepairsRequisitionUpsertWithWhereUniqueWithoutVehicleToBeRepairedInput!]
}

input RepairsRequisitionUpdateOneWithoutPaymentsDetailsInput {
  create: RepairsRequisitionCreateWithoutPaymentsDetailsInput
  connect: RepairsRequisitionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RepairsRequisitionUpdateWithoutPaymentsDetailsDataInput
  upsert: RepairsRequisitionUpsertWithoutPaymentsDetailsInput
}

input RepairsRequisitionUpdateWithoutPaymentsDetailsDataInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleUpdateOneWithoutRepairsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedRepairsRequestsInput
}

input RepairsRequisitionUpdateWithoutRequestApprovedByDataInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedRepairsRequestsInput
  vehicleToBeRepaired: VehicleUpdateOneWithoutRepairsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionUpdateWithoutRequestedByDataInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  vehicleToBeRepaired: VehicleUpdateOneWithoutRepairsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionUpdateWithoutVehicleToBeRepairedDataInput {
  approxCostOfRepair: Int
  otherDetails: String
  approvalStatus: Boolean
  approvalDate: DateTime
  issuedCash: Boolean
  dateServiced: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedRepairsRequestsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedRepairsRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRepairsRequisitionPaymentInput
}

input RepairsRequisitionUpdateWithWhereUniqueWithoutRequestApprovedByInput {
  where: RepairsRequisitionWhereUniqueInput!
  data: RepairsRequisitionUpdateWithoutRequestApprovedByDataInput!
}

input RepairsRequisitionUpdateWithWhereUniqueWithoutRequestedByInput {
  where: RepairsRequisitionWhereUniqueInput!
  data: RepairsRequisitionUpdateWithoutRequestedByDataInput!
}

input RepairsRequisitionUpdateWithWhereUniqueWithoutVehicleToBeRepairedInput {
  where: RepairsRequisitionWhereUniqueInput!
  data: RepairsRequisitionUpdateWithoutVehicleToBeRepairedDataInput!
}

input RepairsRequisitionUpsertWithoutPaymentsDetailsInput {
  update: RepairsRequisitionUpdateWithoutPaymentsDetailsDataInput!
  create: RepairsRequisitionCreateWithoutPaymentsDetailsInput!
}

input RepairsRequisitionUpsertWithWhereUniqueWithoutRequestApprovedByInput {
  where: RepairsRequisitionWhereUniqueInput!
  update: RepairsRequisitionUpdateWithoutRequestApprovedByDataInput!
  create: RepairsRequisitionCreateWithoutRequestApprovedByInput!
}

input RepairsRequisitionUpsertWithWhereUniqueWithoutRequestedByInput {
  where: RepairsRequisitionWhereUniqueInput!
  update: RepairsRequisitionUpdateWithoutRequestedByDataInput!
  create: RepairsRequisitionCreateWithoutRequestedByInput!
}

input RepairsRequisitionUpsertWithWhereUniqueWithoutVehicleToBeRepairedInput {
  where: RepairsRequisitionWhereUniqueInput!
  update: RepairsRequisitionUpdateWithoutVehicleToBeRepairedDataInput!
  create: RepairsRequisitionCreateWithoutVehicleToBeRepairedInput!
}

input RepairsRequisitionWhereInput {
  """Logical AND on all given filters."""
  AND: [RepairsRequisitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RepairsRequisitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RepairsRequisitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approxCostOfRepair: Int

  """All values that are not equal to given value."""
  approxCostOfRepair_not: Int

  """All values that are contained in given list."""
  approxCostOfRepair_in: [Int!]

  """All values that are not contained in given list."""
  approxCostOfRepair_not_in: [Int!]

  """All values less than the given value."""
  approxCostOfRepair_lt: Int

  """All values less than or equal the given value."""
  approxCostOfRepair_lte: Int

  """All values greater than the given value."""
  approxCostOfRepair_gt: Int

  """All values greater than or equal the given value."""
  approxCostOfRepair_gte: Int
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  approvalStatus: Boolean

  """All values that are not equal to given value."""
  approvalStatus_not: Boolean
  approvalDate: DateTime

  """All values that are not equal to given value."""
  approvalDate_not: DateTime

  """All values that are contained in given list."""
  approvalDate_in: [DateTime!]

  """All values that are not contained in given list."""
  approvalDate_not_in: [DateTime!]

  """All values less than the given value."""
  approvalDate_lt: DateTime

  """All values less than or equal the given value."""
  approvalDate_lte: DateTime

  """All values greater than the given value."""
  approvalDate_gt: DateTime

  """All values greater than or equal the given value."""
  approvalDate_gte: DateTime
  issuedCash: Boolean

  """All values that are not equal to given value."""
  issuedCash_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  dateServiced: DateTime

  """All values that are not equal to given value."""
  dateServiced_not: DateTime

  """All values that are contained in given list."""
  dateServiced_in: [DateTime!]

  """All values that are not contained in given list."""
  dateServiced_not_in: [DateTime!]

  """All values less than the given value."""
  dateServiced_lt: DateTime

  """All values less than or equal the given value."""
  dateServiced_lte: DateTime

  """All values greater than the given value."""
  dateServiced_gt: DateTime

  """All values greater than or equal the given value."""
  dateServiced_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requestedBy: UserWhereInput
  vehicleToBeRepaired: VehicleWhereInput
  requestApprovedBy: UserWhereInput
  paymentsDetails: PaymentIssueWhereInput
}

input RepairsRequisitionWhereUniqueInput {
  id: ID
}

type RequestService implements Node {
  id: ID!
  requestedBy(where: UserWhereInput): User
  vehicleToBeServiced(where: VehicleWhereInput): Vehicle
  approxCostOFService: Int
  otherDetails: String
  requestApprovedBy(where: UserWhereInput): User
  approvalStatus: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  issuedCash: Boolean
  approvalDate: DateTime
  paymentsDetails(where: PaymentIssueWhereInput): PaymentIssue
  cashIssued: Boolean
  transactionCompleted: Boolean
}

"""A connection to a list of items."""
type RequestServiceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RequestServiceEdge]!
  aggregate: AggregateRequestService!
}

input RequestServiceCreateInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserCreateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleCreateOneWithoutServiceInput
  requestApprovedBy: UserCreateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRequestedServicePaymentInput
}

input RequestServiceCreateManyWithoutRequestApprovedByInput {
  create: [RequestServiceCreateWithoutRequestApprovedByInput!]
  connect: [RequestServiceWhereUniqueInput!]
}

input RequestServiceCreateManyWithoutRequestedByInput {
  create: [RequestServiceCreateWithoutRequestedByInput!]
  connect: [RequestServiceWhereUniqueInput!]
}

input RequestServiceCreateManyWithoutVehicleToBeServicedInput {
  create: [RequestServiceCreateWithoutVehicleToBeServicedInput!]
  connect: [RequestServiceWhereUniqueInput!]
}

input RequestServiceCreateOneWithoutPaymentsDetailsInput {
  create: RequestServiceCreateWithoutPaymentsDetailsInput
  connect: RequestServiceWhereUniqueInput
}

input RequestServiceCreateWithoutPaymentsDetailsInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserCreateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleCreateOneWithoutServiceInput
  requestApprovedBy: UserCreateOneWithoutApprovedServiceRequestsInput
}

input RequestServiceCreateWithoutRequestApprovedByInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserCreateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleCreateOneWithoutServiceInput
  paymentsDetails: PaymentIssueCreateOneWithoutRequestedServicePaymentInput
}

input RequestServiceCreateWithoutRequestedByInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  vehicleToBeServiced: VehicleCreateOneWithoutServiceInput
  requestApprovedBy: UserCreateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRequestedServicePaymentInput
}

input RequestServiceCreateWithoutVehicleToBeServicedInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserCreateOneWithoutInitiatedServiceRequestsInput
  requestApprovedBy: UserCreateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueCreateOneWithoutRequestedServicePaymentInput
}

"""An edge in a connection."""
type RequestServiceEdge {
  """The item at the end of the edge."""
  node: RequestService!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RequestServiceOrderByInput {
  id_ASC
  id_DESC
  approxCostOFService_ASC
  approxCostOFService_DESC
  otherDetails_ASC
  otherDetails_DESC
  approvalStatus_ASC
  approvalStatus_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  issuedCash_ASC
  issuedCash_DESC
  approvalDate_ASC
  approvalDate_DESC
  cashIssued_ASC
  cashIssued_DESC
  transactionCompleted_ASC
  transactionCompleted_DESC
}

type RequestServicePreviousValues {
  id: ID!
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
}

type RequestServiceSubscriptionPayload {
  mutation: MutationType!
  node: RequestService
  updatedFields: [String!]
  previousValues: RequestServicePreviousValues
}

input RequestServiceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestServiceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestServiceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestServiceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RequestServiceWhereInput
}

input RequestServiceUpdateInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserUpdateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleUpdateOneWithoutServiceInput
  requestApprovedBy: UserUpdateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRequestedServicePaymentInput
}

input RequestServiceUpdateManyWithoutRequestApprovedByInput {
  create: [RequestServiceCreateWithoutRequestApprovedByInput!]
  connect: [RequestServiceWhereUniqueInput!]
  disconnect: [RequestServiceWhereUniqueInput!]
  delete: [RequestServiceWhereUniqueInput!]
  update: [RequestServiceUpdateWithWhereUniqueWithoutRequestApprovedByInput!]
  upsert: [RequestServiceUpsertWithWhereUniqueWithoutRequestApprovedByInput!]
}

input RequestServiceUpdateManyWithoutRequestedByInput {
  create: [RequestServiceCreateWithoutRequestedByInput!]
  connect: [RequestServiceWhereUniqueInput!]
  disconnect: [RequestServiceWhereUniqueInput!]
  delete: [RequestServiceWhereUniqueInput!]
  update: [RequestServiceUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [RequestServiceUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input RequestServiceUpdateManyWithoutVehicleToBeServicedInput {
  create: [RequestServiceCreateWithoutVehicleToBeServicedInput!]
  connect: [RequestServiceWhereUniqueInput!]
  disconnect: [RequestServiceWhereUniqueInput!]
  delete: [RequestServiceWhereUniqueInput!]
  update: [RequestServiceUpdateWithWhereUniqueWithoutVehicleToBeServicedInput!]
  upsert: [RequestServiceUpsertWithWhereUniqueWithoutVehicleToBeServicedInput!]
}

input RequestServiceUpdateOneWithoutPaymentsDetailsInput {
  create: RequestServiceCreateWithoutPaymentsDetailsInput
  connect: RequestServiceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: RequestServiceUpdateWithoutPaymentsDetailsDataInput
  upsert: RequestServiceUpsertWithoutPaymentsDetailsInput
}

input RequestServiceUpdateWithoutPaymentsDetailsDataInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserUpdateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleUpdateOneWithoutServiceInput
  requestApprovedBy: UserUpdateOneWithoutApprovedServiceRequestsInput
}

input RequestServiceUpdateWithoutRequestApprovedByDataInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserUpdateOneWithoutInitiatedServiceRequestsInput
  vehicleToBeServiced: VehicleUpdateOneWithoutServiceInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRequestedServicePaymentInput
}

input RequestServiceUpdateWithoutRequestedByDataInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  vehicleToBeServiced: VehicleUpdateOneWithoutServiceInput
  requestApprovedBy: UserUpdateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRequestedServicePaymentInput
}

input RequestServiceUpdateWithoutVehicleToBeServicedDataInput {
  approxCostOFService: Int
  otherDetails: String
  approvalStatus: Boolean
  issuedCash: Boolean
  approvalDate: DateTime
  cashIssued: Boolean
  transactionCompleted: Boolean
  requestedBy: UserUpdateOneWithoutInitiatedServiceRequestsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedServiceRequestsInput
  paymentsDetails: PaymentIssueUpdateOneWithoutRequestedServicePaymentInput
}

input RequestServiceUpdateWithWhereUniqueWithoutRequestApprovedByInput {
  where: RequestServiceWhereUniqueInput!
  data: RequestServiceUpdateWithoutRequestApprovedByDataInput!
}

input RequestServiceUpdateWithWhereUniqueWithoutRequestedByInput {
  where: RequestServiceWhereUniqueInput!
  data: RequestServiceUpdateWithoutRequestedByDataInput!
}

input RequestServiceUpdateWithWhereUniqueWithoutVehicleToBeServicedInput {
  where: RequestServiceWhereUniqueInput!
  data: RequestServiceUpdateWithoutVehicleToBeServicedDataInput!
}

input RequestServiceUpsertWithoutPaymentsDetailsInput {
  update: RequestServiceUpdateWithoutPaymentsDetailsDataInput!
  create: RequestServiceCreateWithoutPaymentsDetailsInput!
}

input RequestServiceUpsertWithWhereUniqueWithoutRequestApprovedByInput {
  where: RequestServiceWhereUniqueInput!
  update: RequestServiceUpdateWithoutRequestApprovedByDataInput!
  create: RequestServiceCreateWithoutRequestApprovedByInput!
}

input RequestServiceUpsertWithWhereUniqueWithoutRequestedByInput {
  where: RequestServiceWhereUniqueInput!
  update: RequestServiceUpdateWithoutRequestedByDataInput!
  create: RequestServiceCreateWithoutRequestedByInput!
}

input RequestServiceUpsertWithWhereUniqueWithoutVehicleToBeServicedInput {
  where: RequestServiceWhereUniqueInput!
  update: RequestServiceUpdateWithoutVehicleToBeServicedDataInput!
  create: RequestServiceCreateWithoutVehicleToBeServicedInput!
}

input RequestServiceWhereInput {
  """Logical AND on all given filters."""
  AND: [RequestServiceWhereInput!]

  """Logical OR on all given filters."""
  OR: [RequestServiceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RequestServiceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approxCostOFService: Int

  """All values that are not equal to given value."""
  approxCostOFService_not: Int

  """All values that are contained in given list."""
  approxCostOFService_in: [Int!]

  """All values that are not contained in given list."""
  approxCostOFService_not_in: [Int!]

  """All values less than the given value."""
  approxCostOFService_lt: Int

  """All values less than or equal the given value."""
  approxCostOFService_lte: Int

  """All values greater than the given value."""
  approxCostOFService_gt: Int

  """All values greater than or equal the given value."""
  approxCostOFService_gte: Int
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  approvalStatus: Boolean

  """All values that are not equal to given value."""
  approvalStatus_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  issuedCash: Boolean

  """All values that are not equal to given value."""
  issuedCash_not: Boolean
  approvalDate: DateTime

  """All values that are not equal to given value."""
  approvalDate_not: DateTime

  """All values that are contained in given list."""
  approvalDate_in: [DateTime!]

  """All values that are not contained in given list."""
  approvalDate_not_in: [DateTime!]

  """All values less than the given value."""
  approvalDate_lt: DateTime

  """All values less than or equal the given value."""
  approvalDate_lte: DateTime

  """All values greater than the given value."""
  approvalDate_gt: DateTime

  """All values greater than or equal the given value."""
  approvalDate_gte: DateTime
  cashIssued: Boolean

  """All values that are not equal to given value."""
  cashIssued_not: Boolean
  transactionCompleted: Boolean

  """All values that are not equal to given value."""
  transactionCompleted_not: Boolean
  requestedBy: UserWhereInput
  vehicleToBeServiced: VehicleWhereInput
  requestApprovedBy: UserWhereInput
  paymentsDetails: PaymentIssueWhereInput
}

input RequestServiceWhereUniqueInput {
  id: ID
}

type Role implements Node {
  id: ID!
  roleName: String!
  minimumSalary: String!
  maximumSalary: String!
  personnels(where: PersonnelWhereInput, orderBy: PersonnelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Personnel!]
  createdAt: DateTime!
  description: String
  updatedAt: DateTime!
}

enum ROLE {
  USER
  ACCOUNTANT
  SUPERUSER
  DIRECTOR
  ADMIN
}

"""A connection to a list of items."""
type RoleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RoleEdge]!
  aggregate: AggregateRole!
}

input RoleCreateInput {
  roleName: String!
  minimumSalary: String!
  maximumSalary: String!
  description: String
  personnels: PersonnelCreateManyWithoutDesignationInput
}

input RoleCreateOneWithoutPersonnelsInput {
  create: RoleCreateWithoutPersonnelsInput
  connect: RoleWhereUniqueInput
}

input RoleCreateWithoutPersonnelsInput {
  roleName: String!
  minimumSalary: String!
  maximumSalary: String!
  description: String
}

"""An edge in a connection."""
type RoleEdge {
  """The item at the end of the edge."""
  node: Role!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RoleOrderByInput {
  id_ASC
  id_DESC
  roleName_ASC
  roleName_DESC
  minimumSalary_ASC
  minimumSalary_DESC
  maximumSalary_ASC
  maximumSalary_DESC
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RolePreviousValues {
  id: ID!
  roleName: String!
  minimumSalary: String!
  maximumSalary: String!
  createdAt: DateTime!
  description: String
  updatedAt: DateTime!
}

type RoleSubscriptionPayload {
  mutation: MutationType!
  node: Role
  updatedFields: [String!]
  previousValues: RolePreviousValues
}

input RoleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RoleWhereInput
}

input RoleUpdateInput {
  roleName: String
  minimumSalary: String
  maximumSalary: String
  description: String
  personnels: PersonnelUpdateManyWithoutDesignationInput
}

input RoleUpdateOneWithoutPersonnelsInput {
  create: RoleCreateWithoutPersonnelsInput
  connect: RoleWhereUniqueInput
  delete: Boolean
  update: RoleUpdateWithoutPersonnelsDataInput
  upsert: RoleUpsertWithoutPersonnelsInput
}

input RoleUpdateWithoutPersonnelsDataInput {
  roleName: String
  minimumSalary: String
  maximumSalary: String
  description: String
}

input RoleUpsertWithoutPersonnelsInput {
  update: RoleUpdateWithoutPersonnelsDataInput!
  create: RoleCreateWithoutPersonnelsInput!
}

input RoleWhereInput {
  """Logical AND on all given filters."""
  AND: [RoleWhereInput!]

  """Logical OR on all given filters."""
  OR: [RoleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RoleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  roleName: String

  """All values that are not equal to given value."""
  roleName_not: String

  """All values that are contained in given list."""
  roleName_in: [String!]

  """All values that are not contained in given list."""
  roleName_not_in: [String!]

  """All values less than the given value."""
  roleName_lt: String

  """All values less than or equal the given value."""
  roleName_lte: String

  """All values greater than the given value."""
  roleName_gt: String

  """All values greater than or equal the given value."""
  roleName_gte: String

  """All values containing the given string."""
  roleName_contains: String

  """All values not containing the given string."""
  roleName_not_contains: String

  """All values starting with the given string."""
  roleName_starts_with: String

  """All values not starting with the given string."""
  roleName_not_starts_with: String

  """All values ending with the given string."""
  roleName_ends_with: String

  """All values not ending with the given string."""
  roleName_not_ends_with: String
  minimumSalary: String

  """All values that are not equal to given value."""
  minimumSalary_not: String

  """All values that are contained in given list."""
  minimumSalary_in: [String!]

  """All values that are not contained in given list."""
  minimumSalary_not_in: [String!]

  """All values less than the given value."""
  minimumSalary_lt: String

  """All values less than or equal the given value."""
  minimumSalary_lte: String

  """All values greater than the given value."""
  minimumSalary_gt: String

  """All values greater than or equal the given value."""
  minimumSalary_gte: String

  """All values containing the given string."""
  minimumSalary_contains: String

  """All values not containing the given string."""
  minimumSalary_not_contains: String

  """All values starting with the given string."""
  minimumSalary_starts_with: String

  """All values not starting with the given string."""
  minimumSalary_not_starts_with: String

  """All values ending with the given string."""
  minimumSalary_ends_with: String

  """All values not ending with the given string."""
  minimumSalary_not_ends_with: String
  maximumSalary: String

  """All values that are not equal to given value."""
  maximumSalary_not: String

  """All values that are contained in given list."""
  maximumSalary_in: [String!]

  """All values that are not contained in given list."""
  maximumSalary_not_in: [String!]

  """All values less than the given value."""
  maximumSalary_lt: String

  """All values less than or equal the given value."""
  maximumSalary_lte: String

  """All values greater than the given value."""
  maximumSalary_gt: String

  """All values greater than or equal the given value."""
  maximumSalary_gte: String

  """All values containing the given string."""
  maximumSalary_contains: String

  """All values not containing the given string."""
  maximumSalary_not_contains: String

  """All values starting with the given string."""
  maximumSalary_starts_with: String

  """All values not starting with the given string."""
  maximumSalary_not_starts_with: String

  """All values ending with the given string."""
  maximumSalary_ends_with: String

  """All values not ending with the given string."""
  maximumSalary_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  personnels_every: PersonnelWhereInput
  personnels_some: PersonnelWhereInput
  personnels_none: PersonnelWhereInput
}

input RoleWhereUniqueInput {
  id: ID
}

type Section implements Node {
  id: ID!
  sectionName: String!
  sectionDescription: String!
  sectionProject(where: ProjectWhereInput): Project!
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectionAssignment implements Node {
  id: ID!
  projectAssignedTo(where: ProjectWhereInput): Project!
  personAssignedTo(where: PersonnelWhereInput): Personnel!
  sectionAssignedTo(where: SectionWhereInput): Section!
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type SectionAssignmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionAssignmentEdge]!
  aggregate: AggregateSectionAssignment!
}

input SectionAssignmentCreateInput {
  projectAssignedTo: ProjectCreateOneInput!
  personAssignedTo: PersonnelCreateOneInput!
  sectionAssignedTo: SectionCreateOneInput!
}

input SectionAssignmentCreateManyInput {
  create: [SectionAssignmentCreateInput!]
  connect: [SectionAssignmentWhereUniqueInput!]
}

"""An edge in a connection."""
type SectionAssignmentEdge {
  """The item at the end of the edge."""
  node: SectionAssignment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionAssignmentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SectionAssignmentPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectionAssignmentSubscriptionPayload {
  mutation: MutationType!
  node: SectionAssignment
  updatedFields: [String!]
  previousValues: SectionAssignmentPreviousValues
}

input SectionAssignmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionAssignmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionAssignmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionAssignmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionAssignmentWhereInput
}

input SectionAssignmentUpdateDataInput {
  projectAssignedTo: ProjectUpdateOneInput
  personAssignedTo: PersonnelUpdateOneInput
  sectionAssignedTo: SectionUpdateOneInput
}

input SectionAssignmentUpdateInput {
  projectAssignedTo: ProjectUpdateOneInput
  personAssignedTo: PersonnelUpdateOneInput
  sectionAssignedTo: SectionUpdateOneInput
}

input SectionAssignmentUpdateManyInput {
  create: [SectionAssignmentCreateInput!]
  connect: [SectionAssignmentWhereUniqueInput!]
  disconnect: [SectionAssignmentWhereUniqueInput!]
  delete: [SectionAssignmentWhereUniqueInput!]
  update: [SectionAssignmentUpdateWithWhereUniqueNestedInput!]
  upsert: [SectionAssignmentUpsertWithWhereUniqueNestedInput!]
}

input SectionAssignmentUpdateWithWhereUniqueNestedInput {
  where: SectionAssignmentWhereUniqueInput!
  data: SectionAssignmentUpdateDataInput!
}

input SectionAssignmentUpsertWithWhereUniqueNestedInput {
  where: SectionAssignmentWhereUniqueInput!
  update: SectionAssignmentUpdateDataInput!
  create: SectionAssignmentCreateInput!
}

input SectionAssignmentWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionAssignmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionAssignmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionAssignmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  projectAssignedTo: ProjectWhereInput
  personAssignedTo: PersonnelWhereInput
  sectionAssignedTo: SectionWhereInput
  _MagicalBackRelation_PersonnelAssignedSections_every: PersonnelWhereInput
  _MagicalBackRelation_PersonnelAssignedSections_some: PersonnelWhereInput
  _MagicalBackRelation_PersonnelAssignedSections_none: PersonnelWhereInput
}

input SectionAssignmentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type SectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SectionEdge]!
  aggregate: AggregateSection!
}

input SectionCreateInput {
  sectionName: String!
  sectionDescription: String!
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String!
  sectionProject: ProjectCreateOneWithoutSectionsInput!
}

input SectionCreateManyWithoutSectionProjectInput {
  create: [SectionCreateWithoutSectionProjectInput!]
  connect: [SectionWhereUniqueInput!]
}

input SectionCreateOneInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
}

input SectionCreateWithoutSectionProjectInput {
  sectionName: String!
  sectionDescription: String!
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String!
}

"""An edge in a connection."""
type SectionEdge {
  """The item at the end of the edge."""
  node: Section!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SectionOrderByInput {
  id_ASC
  id_DESC
  sectionName_ASC
  sectionName_DESC
  sectionDescription_ASC
  sectionDescription_DESC
  sectionStartDate_ASC
  sectionStartDate_DESC
  sectionEndDate_ASC
  sectionEndDate_DESC
  sectionLocation_ASC
  sectionLocation_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SectionPreviousValues {
  id: ID!
  sectionName: String!
  sectionDescription: String!
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SectionSubscriptionPayload {
  mutation: MutationType!
  node: Section
  updatedFields: [String!]
  previousValues: SectionPreviousValues
}

input SectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SectionWhereInput
}

input SectionUpdateDataInput {
  sectionName: String
  sectionDescription: String
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String
  sectionProject: ProjectUpdateOneWithoutSectionsInput
}

input SectionUpdateInput {
  sectionName: String
  sectionDescription: String
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String
  sectionProject: ProjectUpdateOneWithoutSectionsInput
}

input SectionUpdateManyWithoutSectionProjectInput {
  create: [SectionCreateWithoutSectionProjectInput!]
  connect: [SectionWhereUniqueInput!]
  disconnect: [SectionWhereUniqueInput!]
  delete: [SectionWhereUniqueInput!]
  update: [SectionUpdateWithWhereUniqueWithoutSectionProjectInput!]
  upsert: [SectionUpsertWithWhereUniqueWithoutSectionProjectInput!]
}

input SectionUpdateOneInput {
  create: SectionCreateInput
  connect: SectionWhereUniqueInput
  delete: Boolean
  update: SectionUpdateDataInput
  upsert: SectionUpsertNestedInput
}

input SectionUpdateWithoutSectionProjectDataInput {
  sectionName: String
  sectionDescription: String
  sectionStartDate: DateTime
  sectionEndDate: DateTime
  sectionLocation: String
}

input SectionUpdateWithWhereUniqueWithoutSectionProjectInput {
  where: SectionWhereUniqueInput!
  data: SectionUpdateWithoutSectionProjectDataInput!
}

input SectionUpsertNestedInput {
  update: SectionUpdateDataInput!
  create: SectionCreateInput!
}

input SectionUpsertWithWhereUniqueWithoutSectionProjectInput {
  where: SectionWhereUniqueInput!
  update: SectionUpdateWithoutSectionProjectDataInput!
  create: SectionCreateWithoutSectionProjectInput!
}

input SectionWhereInput {
  """Logical AND on all given filters."""
  AND: [SectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  sectionName: String

  """All values that are not equal to given value."""
  sectionName_not: String

  """All values that are contained in given list."""
  sectionName_in: [String!]

  """All values that are not contained in given list."""
  sectionName_not_in: [String!]

  """All values less than the given value."""
  sectionName_lt: String

  """All values less than or equal the given value."""
  sectionName_lte: String

  """All values greater than the given value."""
  sectionName_gt: String

  """All values greater than or equal the given value."""
  sectionName_gte: String

  """All values containing the given string."""
  sectionName_contains: String

  """All values not containing the given string."""
  sectionName_not_contains: String

  """All values starting with the given string."""
  sectionName_starts_with: String

  """All values not starting with the given string."""
  sectionName_not_starts_with: String

  """All values ending with the given string."""
  sectionName_ends_with: String

  """All values not ending with the given string."""
  sectionName_not_ends_with: String
  sectionDescription: String

  """All values that are not equal to given value."""
  sectionDescription_not: String

  """All values that are contained in given list."""
  sectionDescription_in: [String!]

  """All values that are not contained in given list."""
  sectionDescription_not_in: [String!]

  """All values less than the given value."""
  sectionDescription_lt: String

  """All values less than or equal the given value."""
  sectionDescription_lte: String

  """All values greater than the given value."""
  sectionDescription_gt: String

  """All values greater than or equal the given value."""
  sectionDescription_gte: String

  """All values containing the given string."""
  sectionDescription_contains: String

  """All values not containing the given string."""
  sectionDescription_not_contains: String

  """All values starting with the given string."""
  sectionDescription_starts_with: String

  """All values not starting with the given string."""
  sectionDescription_not_starts_with: String

  """All values ending with the given string."""
  sectionDescription_ends_with: String

  """All values not ending with the given string."""
  sectionDescription_not_ends_with: String
  sectionStartDate: DateTime

  """All values that are not equal to given value."""
  sectionStartDate_not: DateTime

  """All values that are contained in given list."""
  sectionStartDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sectionStartDate_not_in: [DateTime!]

  """All values less than the given value."""
  sectionStartDate_lt: DateTime

  """All values less than or equal the given value."""
  sectionStartDate_lte: DateTime

  """All values greater than the given value."""
  sectionStartDate_gt: DateTime

  """All values greater than or equal the given value."""
  sectionStartDate_gte: DateTime
  sectionEndDate: DateTime

  """All values that are not equal to given value."""
  sectionEndDate_not: DateTime

  """All values that are contained in given list."""
  sectionEndDate_in: [DateTime!]

  """All values that are not contained in given list."""
  sectionEndDate_not_in: [DateTime!]

  """All values less than the given value."""
  sectionEndDate_lt: DateTime

  """All values less than or equal the given value."""
  sectionEndDate_lte: DateTime

  """All values greater than the given value."""
  sectionEndDate_gt: DateTime

  """All values greater than or equal the given value."""
  sectionEndDate_gte: DateTime
  sectionLocation: String

  """All values that are not equal to given value."""
  sectionLocation_not: String

  """All values that are contained in given list."""
  sectionLocation_in: [String!]

  """All values that are not contained in given list."""
  sectionLocation_not_in: [String!]

  """All values less than the given value."""
  sectionLocation_lt: String

  """All values less than or equal the given value."""
  sectionLocation_lte: String

  """All values greater than the given value."""
  sectionLocation_gt: String

  """All values greater than or equal the given value."""
  sectionLocation_gte: String

  """All values containing the given string."""
  sectionLocation_contains: String

  """All values not containing the given string."""
  sectionLocation_not_contains: String

  """All values starting with the given string."""
  sectionLocation_starts_with: String

  """All values not starting with the given string."""
  sectionLocation_not_starts_with: String

  """All values ending with the given string."""
  sectionLocation_ends_with: String

  """All values not ending with the given string."""
  sectionLocation_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  sectionProject: ProjectWhereInput
  _MagicalBackRelation_SectionToSectionAssignment_every: SectionAssignmentWhereInput
  _MagicalBackRelation_SectionToSectionAssignment_some: SectionAssignmentWhereInput
  _MagicalBackRelation_SectionToSectionAssignment_none: SectionAssignmentWhereInput
}

input SectionWhereUniqueInput {
  id: ID
}

type ServiceRequisition implements Node {
  id: ID!
  vehicleToBeServiced(where: VehicleWhereInput): Vehicle!
  approxCost: Int
  otherDetails: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type ServiceRequisitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ServiceRequisitionEdge]!
  aggregate: AggregateServiceRequisition!
}

input ServiceRequisitionCreateInput {
  approxCost: Int
  otherDetails: String
  vehicleToBeServiced: VehicleCreateOneInput!
}

"""An edge in a connection."""
type ServiceRequisitionEdge {
  """The item at the end of the edge."""
  node: ServiceRequisition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ServiceRequisitionOrderByInput {
  id_ASC
  id_DESC
  approxCost_ASC
  approxCost_DESC
  otherDetails_ASC
  otherDetails_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ServiceRequisitionPreviousValues {
  id: ID!
  approxCost: Int
  otherDetails: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type ServiceRequisitionSubscriptionPayload {
  mutation: MutationType!
  node: ServiceRequisition
  updatedFields: [String!]
  previousValues: ServiceRequisitionPreviousValues
}

input ServiceRequisitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceRequisitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceRequisitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceRequisitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ServiceRequisitionWhereInput
}

input ServiceRequisitionUpdateInput {
  approxCost: Int
  otherDetails: String
  vehicleToBeServiced: VehicleUpdateOneInput
}

input ServiceRequisitionWhereInput {
  """Logical AND on all given filters."""
  AND: [ServiceRequisitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ServiceRequisitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ServiceRequisitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approxCost: Int

  """All values that are not equal to given value."""
  approxCost_not: Int

  """All values that are contained in given list."""
  approxCost_in: [Int!]

  """All values that are not contained in given list."""
  approxCost_not_in: [Int!]

  """All values less than the given value."""
  approxCost_lt: Int

  """All values less than or equal the given value."""
  approxCost_lte: Int

  """All values greater than the given value."""
  approxCost_gt: Int

  """All values greater than or equal the given value."""
  approxCost_gte: Int
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  vehicleToBeServiced: VehicleWhereInput
}

input ServiceRequisitionWhereUniqueInput {
  id: ID
}

type StoreBalance implements Node {
  id: ID!
  item(where: MaterialsCostingWhereInput): MaterialsCosting
  balance: Int!
}

"""A connection to a list of items."""
type StoreBalanceConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoreBalanceEdge]!
  aggregate: AggregateStoreBalance!
}

input StoreBalanceCreateInput {
  balance: Int!
  item: MaterialsCostingCreateOneWithoutBalanceInput
}

input StoreBalanceCreateOneWithoutItemInput {
  create: StoreBalanceCreateWithoutItemInput
  connect: StoreBalanceWhereUniqueInput
}

input StoreBalanceCreateWithoutItemInput {
  balance: Int!
}

"""An edge in a connection."""
type StoreBalanceEdge {
  """The item at the end of the edge."""
  node: StoreBalance!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoreBalanceOrderByInput {
  id_ASC
  id_DESC
  balance_ASC
  balance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type StoreBalancePreviousValues {
  id: ID!
  balance: Int!
}

type StoreBalanceSubscriptionPayload {
  mutation: MutationType!
  node: StoreBalance
  updatedFields: [String!]
  previousValues: StoreBalancePreviousValues
}

input StoreBalanceSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreBalanceSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreBalanceSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreBalanceSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoreBalanceWhereInput
}

input StoreBalanceUpdateInput {
  balance: Int
  item: MaterialsCostingUpdateOneWithoutBalanceInput
}

input StoreBalanceUpdateOneWithoutItemInput {
  create: StoreBalanceCreateWithoutItemInput
  connect: StoreBalanceWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StoreBalanceUpdateWithoutItemDataInput
  upsert: StoreBalanceUpsertWithoutItemInput
}

input StoreBalanceUpdateWithoutItemDataInput {
  balance: Int
}

input StoreBalanceUpsertWithoutItemInput {
  update: StoreBalanceUpdateWithoutItemDataInput!
  create: StoreBalanceCreateWithoutItemInput!
}

input StoreBalanceWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreBalanceWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreBalanceWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreBalanceWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  balance: Int

  """All values that are not equal to given value."""
  balance_not: Int

  """All values that are contained in given list."""
  balance_in: [Int!]

  """All values that are not contained in given list."""
  balance_not_in: [Int!]

  """All values less than the given value."""
  balance_lt: Int

  """All values less than or equal the given value."""
  balance_lte: Int

  """All values greater than the given value."""
  balance_gt: Int

  """All values greater than or equal the given value."""
  balance_gte: Int
  item: MaterialsCostingWhereInput
}

input StoreBalanceWhereUniqueInput {
  id: ID
}

type StoreTransaction implements Node {
  id: ID!
  itemTransacted(where: MaterialsCostingWhereInput): MaterialsCosting
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  materialsIssuedTo(where: ProjectWhereInput): Project
  materialsRecievedFrom(where: SupplierWhereInput): Supplier
  deliveryNote: String
  createdAt: DateTime!
  updatedAt: DateTime!
  transactedBy(where: UserWhereInput): User!
}

"""A connection to a list of items."""
type StoreTransactionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [StoreTransactionEdge]!
  aggregate: AggregateStoreTransaction!
}

input StoreTransactionCreateInput {
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  deliveryNote: String
  itemTransacted: MaterialsCostingCreateOneWithoutTransactionsInput
  materialsIssuedTo: ProjectCreateOneWithoutMaterialsInput
  materialsRecievedFrom: SupplierCreateOneWithoutSuppliesInput
  transactedBy: UserCreateOneInput!
}

input StoreTransactionCreateManyWithoutItemTransactedInput {
  create: [StoreTransactionCreateWithoutItemTransactedInput!]
  connect: [StoreTransactionWhereUniqueInput!]
}

input StoreTransactionCreateManyWithoutMaterialsRecievedFromInput {
  create: [StoreTransactionCreateWithoutMaterialsRecievedFromInput!]
  connect: [StoreTransactionWhereUniqueInput!]
}

input StoreTransactionCreateOneWithoutMaterialsIssuedToInput {
  create: StoreTransactionCreateWithoutMaterialsIssuedToInput
  connect: StoreTransactionWhereUniqueInput
}

input StoreTransactionCreateWithoutItemTransactedInput {
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  deliveryNote: String
  materialsIssuedTo: ProjectCreateOneWithoutMaterialsInput
  materialsRecievedFrom: SupplierCreateOneWithoutSuppliesInput
  transactedBy: UserCreateOneInput!
}

input StoreTransactionCreateWithoutMaterialsIssuedToInput {
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  deliveryNote: String
  itemTransacted: MaterialsCostingCreateOneWithoutTransactionsInput
  materialsRecievedFrom: SupplierCreateOneWithoutSuppliesInput
  transactedBy: UserCreateOneInput!
}

input StoreTransactionCreateWithoutMaterialsRecievedFromInput {
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  deliveryNote: String
  itemTransacted: MaterialsCostingCreateOneWithoutTransactionsInput
  materialsIssuedTo: ProjectCreateOneWithoutMaterialsInput
  transactedBy: UserCreateOneInput!
}

"""An edge in a connection."""
type StoreTransactionEdge {
  """The item at the end of the edge."""
  node: StoreTransaction!

  """A cursor for use in pagination."""
  cursor: String!
}

enum StoreTransactionOrderByInput {
  id_ASC
  id_DESC
  balanceBefore_ASC
  balanceBefore_DESC
  balanceAfter_ASC
  balanceAfter_DESC
  unitsTransacted_ASC
  unitsTransacted_DESC
  transactionType_ASC
  transactionType_DESC
  transactionDate_ASC
  transactionDate_DESC
  deliveryNote_ASC
  deliveryNote_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StoreTransactionPreviousValues {
  id: ID!
  balanceBefore: Int!
  balanceAfter: Int!
  unitsTransacted: Int
  transactionType: String!
  transactionDate: DateTime!
  deliveryNote: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type StoreTransactionSubscriptionPayload {
  mutation: MutationType!
  node: StoreTransaction
  updatedFields: [String!]
  previousValues: StoreTransactionPreviousValues
}

input StoreTransactionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreTransactionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreTransactionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreTransactionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StoreTransactionWhereInput
}

input StoreTransactionUpdateInput {
  balanceBefore: Int
  balanceAfter: Int
  unitsTransacted: Int
  transactionType: String
  transactionDate: DateTime
  deliveryNote: String
  itemTransacted: MaterialsCostingUpdateOneWithoutTransactionsInput
  materialsIssuedTo: ProjectUpdateOneWithoutMaterialsInput
  materialsRecievedFrom: SupplierUpdateOneWithoutSuppliesInput
  transactedBy: UserUpdateOneInput
}

input StoreTransactionUpdateManyWithoutItemTransactedInput {
  create: [StoreTransactionCreateWithoutItemTransactedInput!]
  connect: [StoreTransactionWhereUniqueInput!]
  disconnect: [StoreTransactionWhereUniqueInput!]
  delete: [StoreTransactionWhereUniqueInput!]
  update: [StoreTransactionUpdateWithWhereUniqueWithoutItemTransactedInput!]
  upsert: [StoreTransactionUpsertWithWhereUniqueWithoutItemTransactedInput!]
}

input StoreTransactionUpdateManyWithoutMaterialsRecievedFromInput {
  create: [StoreTransactionCreateWithoutMaterialsRecievedFromInput!]
  connect: [StoreTransactionWhereUniqueInput!]
  disconnect: [StoreTransactionWhereUniqueInput!]
  delete: [StoreTransactionWhereUniqueInput!]
  update: [StoreTransactionUpdateWithWhereUniqueWithoutMaterialsRecievedFromInput!]
  upsert: [StoreTransactionUpsertWithWhereUniqueWithoutMaterialsRecievedFromInput!]
}

input StoreTransactionUpdateOneWithoutMaterialsIssuedToInput {
  create: StoreTransactionCreateWithoutMaterialsIssuedToInput
  connect: StoreTransactionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: StoreTransactionUpdateWithoutMaterialsIssuedToDataInput
  upsert: StoreTransactionUpsertWithoutMaterialsIssuedToInput
}

input StoreTransactionUpdateWithoutItemTransactedDataInput {
  balanceBefore: Int
  balanceAfter: Int
  unitsTransacted: Int
  transactionType: String
  transactionDate: DateTime
  deliveryNote: String
  materialsIssuedTo: ProjectUpdateOneWithoutMaterialsInput
  materialsRecievedFrom: SupplierUpdateOneWithoutSuppliesInput
  transactedBy: UserUpdateOneInput
}

input StoreTransactionUpdateWithoutMaterialsIssuedToDataInput {
  balanceBefore: Int
  balanceAfter: Int
  unitsTransacted: Int
  transactionType: String
  transactionDate: DateTime
  deliveryNote: String
  itemTransacted: MaterialsCostingUpdateOneWithoutTransactionsInput
  materialsRecievedFrom: SupplierUpdateOneWithoutSuppliesInput
  transactedBy: UserUpdateOneInput
}

input StoreTransactionUpdateWithoutMaterialsRecievedFromDataInput {
  balanceBefore: Int
  balanceAfter: Int
  unitsTransacted: Int
  transactionType: String
  transactionDate: DateTime
  deliveryNote: String
  itemTransacted: MaterialsCostingUpdateOneWithoutTransactionsInput
  materialsIssuedTo: ProjectUpdateOneWithoutMaterialsInput
  transactedBy: UserUpdateOneInput
}

input StoreTransactionUpdateWithWhereUniqueWithoutItemTransactedInput {
  where: StoreTransactionWhereUniqueInput!
  data: StoreTransactionUpdateWithoutItemTransactedDataInput!
}

input StoreTransactionUpdateWithWhereUniqueWithoutMaterialsRecievedFromInput {
  where: StoreTransactionWhereUniqueInput!
  data: StoreTransactionUpdateWithoutMaterialsRecievedFromDataInput!
}

input StoreTransactionUpsertWithoutMaterialsIssuedToInput {
  update: StoreTransactionUpdateWithoutMaterialsIssuedToDataInput!
  create: StoreTransactionCreateWithoutMaterialsIssuedToInput!
}

input StoreTransactionUpsertWithWhereUniqueWithoutItemTransactedInput {
  where: StoreTransactionWhereUniqueInput!
  update: StoreTransactionUpdateWithoutItemTransactedDataInput!
  create: StoreTransactionCreateWithoutItemTransactedInput!
}

input StoreTransactionUpsertWithWhereUniqueWithoutMaterialsRecievedFromInput {
  where: StoreTransactionWhereUniqueInput!
  update: StoreTransactionUpdateWithoutMaterialsRecievedFromDataInput!
  create: StoreTransactionCreateWithoutMaterialsRecievedFromInput!
}

input StoreTransactionWhereInput {
  """Logical AND on all given filters."""
  AND: [StoreTransactionWhereInput!]

  """Logical OR on all given filters."""
  OR: [StoreTransactionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [StoreTransactionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  balanceBefore: Int

  """All values that are not equal to given value."""
  balanceBefore_not: Int

  """All values that are contained in given list."""
  balanceBefore_in: [Int!]

  """All values that are not contained in given list."""
  balanceBefore_not_in: [Int!]

  """All values less than the given value."""
  balanceBefore_lt: Int

  """All values less than or equal the given value."""
  balanceBefore_lte: Int

  """All values greater than the given value."""
  balanceBefore_gt: Int

  """All values greater than or equal the given value."""
  balanceBefore_gte: Int
  balanceAfter: Int

  """All values that are not equal to given value."""
  balanceAfter_not: Int

  """All values that are contained in given list."""
  balanceAfter_in: [Int!]

  """All values that are not contained in given list."""
  balanceAfter_not_in: [Int!]

  """All values less than the given value."""
  balanceAfter_lt: Int

  """All values less than or equal the given value."""
  balanceAfter_lte: Int

  """All values greater than the given value."""
  balanceAfter_gt: Int

  """All values greater than or equal the given value."""
  balanceAfter_gte: Int
  unitsTransacted: Int

  """All values that are not equal to given value."""
  unitsTransacted_not: Int

  """All values that are contained in given list."""
  unitsTransacted_in: [Int!]

  """All values that are not contained in given list."""
  unitsTransacted_not_in: [Int!]

  """All values less than the given value."""
  unitsTransacted_lt: Int

  """All values less than or equal the given value."""
  unitsTransacted_lte: Int

  """All values greater than the given value."""
  unitsTransacted_gt: Int

  """All values greater than or equal the given value."""
  unitsTransacted_gte: Int
  transactionType: String

  """All values that are not equal to given value."""
  transactionType_not: String

  """All values that are contained in given list."""
  transactionType_in: [String!]

  """All values that are not contained in given list."""
  transactionType_not_in: [String!]

  """All values less than the given value."""
  transactionType_lt: String

  """All values less than or equal the given value."""
  transactionType_lte: String

  """All values greater than the given value."""
  transactionType_gt: String

  """All values greater than or equal the given value."""
  transactionType_gte: String

  """All values containing the given string."""
  transactionType_contains: String

  """All values not containing the given string."""
  transactionType_not_contains: String

  """All values starting with the given string."""
  transactionType_starts_with: String

  """All values not starting with the given string."""
  transactionType_not_starts_with: String

  """All values ending with the given string."""
  transactionType_ends_with: String

  """All values not ending with the given string."""
  transactionType_not_ends_with: String
  transactionDate: DateTime

  """All values that are not equal to given value."""
  transactionDate_not: DateTime

  """All values that are contained in given list."""
  transactionDate_in: [DateTime!]

  """All values that are not contained in given list."""
  transactionDate_not_in: [DateTime!]

  """All values less than the given value."""
  transactionDate_lt: DateTime

  """All values less than or equal the given value."""
  transactionDate_lte: DateTime

  """All values greater than the given value."""
  transactionDate_gt: DateTime

  """All values greater than or equal the given value."""
  transactionDate_gte: DateTime
  deliveryNote: String

  """All values that are not equal to given value."""
  deliveryNote_not: String

  """All values that are contained in given list."""
  deliveryNote_in: [String!]

  """All values that are not contained in given list."""
  deliveryNote_not_in: [String!]

  """All values less than the given value."""
  deliveryNote_lt: String

  """All values less than or equal the given value."""
  deliveryNote_lte: String

  """All values greater than the given value."""
  deliveryNote_gt: String

  """All values greater than or equal the given value."""
  deliveryNote_gte: String

  """All values containing the given string."""
  deliveryNote_contains: String

  """All values not containing the given string."""
  deliveryNote_not_contains: String

  """All values starting with the given string."""
  deliveryNote_starts_with: String

  """All values not starting with the given string."""
  deliveryNote_not_starts_with: String

  """All values ending with the given string."""
  deliveryNote_ends_with: String

  """All values not ending with the given string."""
  deliveryNote_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  itemTransacted: MaterialsCostingWhereInput
  materialsIssuedTo: ProjectWhereInput
  materialsRecievedFrom: SupplierWhereInput
  transactedBy: UserWhereInput
}

input StoreTransactionWhereUniqueInput {
  id: ID
}

type Subscription {
  vehicleOwner(where: VehicleOwnerSubscriptionWhereInput): VehicleOwnerSubscriptionPayload
  driver(where: DriverSubscriptionWhereInput): DriverSubscriptionPayload
  vehicleRequisition(where: VehicleRequisitionSubscriptionWhereInput): VehicleRequisitionSubscriptionPayload
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  role(where: RoleSubscriptionWhereInput): RoleSubscriptionPayload
  vehicleAssignment(where: VehicleAssignmentSubscriptionWhereInput): VehicleAssignmentSubscriptionPayload
  serviceRequisition(where: ServiceRequisitionSubscriptionWhereInput): ServiceRequisitionSubscriptionPayload
  personnelAttendance(where: PersonnelAttendanceSubscriptionWhereInput): PersonnelAttendanceSubscriptionPayload
  requestService(where: RequestServiceSubscriptionWhereInput): RequestServiceSubscriptionPayload
  repairsRequisition(where: RepairsRequisitionSubscriptionWhereInput): RepairsRequisitionSubscriptionPayload
  vehicleInspection(where: VehicleInspectionSubscriptionWhereInput): VehicleInspectionSubscriptionPayload
  materialRequisition(where: MaterialRequisitionSubscriptionWhereInput): MaterialRequisitionSubscriptionPayload
  otherPaymentIssue(where: OtherPaymentIssueSubscriptionWhereInput): OtherPaymentIssueSubscriptionPayload
  storeBalance(where: StoreBalanceSubscriptionWhereInput): StoreBalanceSubscriptionPayload
  storeTransaction(where: StoreTransactionSubscriptionWhereInput): StoreTransactionSubscriptionPayload
  paymentIssue(where: PaymentIssueSubscriptionWhereInput): PaymentIssueSubscriptionPayload
  section(where: SectionSubscriptionWhereInput): SectionSubscriptionPayload
  sectionAssignment(where: SectionAssignmentSubscriptionWhereInput): SectionAssignmentSubscriptionPayload
  supplier(where: SupplierSubscriptionWhereInput): SupplierSubscriptionPayload
  project(where: ProjectSubscriptionWhereInput): ProjectSubscriptionPayload
  vehicle(where: VehicleSubscriptionWhereInput): VehicleSubscriptionPayload
  personnel(where: PersonnelSubscriptionWhereInput): PersonnelSubscriptionPayload
  materialsCosting(where: MaterialsCostingSubscriptionWhereInput): MaterialsCostingSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Supplier implements Node {
  id: ID!
  supplierName: String!
  supplierPhone: String!
  material(where: MaterialsCostingWhereInput): MaterialsCosting
  negotiatedRate: Int
  otherDetails: String
  createdAt: DateTime!
  updatedAt: DateTime!
  createdBy(where: UserWhereInput): User!
  supplies(where: StoreTransactionWhereInput, orderBy: StoreTransactionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [StoreTransaction!]
}

"""A connection to a list of items."""
type SupplierConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SupplierEdge]!
  aggregate: AggregateSupplier!
}

input SupplierCreateInput {
  supplierName: String!
  supplierPhone: String!
  negotiatedRate: Int
  otherDetails: String
  material: MaterialsCostingCreateOneInput
  createdBy: UserCreateOneInput!
  supplies: StoreTransactionCreateManyWithoutMaterialsRecievedFromInput
}

input SupplierCreateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateOneWithoutSuppliesInput {
  create: SupplierCreateWithoutSuppliesInput
  connect: SupplierWhereUniqueInput
}

input SupplierCreateWithoutSuppliesInput {
  supplierName: String!
  supplierPhone: String!
  negotiatedRate: Int
  otherDetails: String
  material: MaterialsCostingCreateOneInput
  createdBy: UserCreateOneInput!
}

"""An edge in a connection."""
type SupplierEdge {
  """The item at the end of the edge."""
  node: Supplier!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SupplierOrderByInput {
  id_ASC
  id_DESC
  supplierName_ASC
  supplierName_DESC
  supplierPhone_ASC
  supplierPhone_DESC
  negotiatedRate_ASC
  negotiatedRate_DESC
  otherDetails_ASC
  otherDetails_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SupplierPreviousValues {
  id: ID!
  supplierName: String!
  supplierPhone: String!
  negotiatedRate: Int
  otherDetails: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SupplierSubscriptionPayload {
  mutation: MutationType!
  node: Supplier
  updatedFields: [String!]
  previousValues: SupplierPreviousValues
}

input SupplierSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SupplierWhereInput
}

input SupplierUpdateDataInput {
  supplierName: String
  supplierPhone: String
  negotiatedRate: Int
  otherDetails: String
  material: MaterialsCostingUpdateOneInput
  createdBy: UserUpdateOneInput
  supplies: StoreTransactionUpdateManyWithoutMaterialsRecievedFromInput
}

input SupplierUpdateInput {
  supplierName: String
  supplierPhone: String
  negotiatedRate: Int
  otherDetails: String
  material: MaterialsCostingUpdateOneInput
  createdBy: UserUpdateOneInput
  supplies: StoreTransactionUpdateManyWithoutMaterialsRecievedFromInput
}

input SupplierUpdateOneInput {
  create: SupplierCreateInput
  connect: SupplierWhereUniqueInput
  delete: Boolean
  update: SupplierUpdateDataInput
  upsert: SupplierUpsertNestedInput
}

input SupplierUpdateOneWithoutSuppliesInput {
  create: SupplierCreateWithoutSuppliesInput
  connect: SupplierWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: SupplierUpdateWithoutSuppliesDataInput
  upsert: SupplierUpsertWithoutSuppliesInput
}

input SupplierUpdateWithoutSuppliesDataInput {
  supplierName: String
  supplierPhone: String
  negotiatedRate: Int
  otherDetails: String
  material: MaterialsCostingUpdateOneInput
  createdBy: UserUpdateOneInput
}

input SupplierUpsertNestedInput {
  update: SupplierUpdateDataInput!
  create: SupplierCreateInput!
}

input SupplierUpsertWithoutSuppliesInput {
  update: SupplierUpdateWithoutSuppliesDataInput!
  create: SupplierCreateWithoutSuppliesInput!
}

input SupplierWhereInput {
  """Logical AND on all given filters."""
  AND: [SupplierWhereInput!]

  """Logical OR on all given filters."""
  OR: [SupplierWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SupplierWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  supplierName: String

  """All values that are not equal to given value."""
  supplierName_not: String

  """All values that are contained in given list."""
  supplierName_in: [String!]

  """All values that are not contained in given list."""
  supplierName_not_in: [String!]

  """All values less than the given value."""
  supplierName_lt: String

  """All values less than or equal the given value."""
  supplierName_lte: String

  """All values greater than the given value."""
  supplierName_gt: String

  """All values greater than or equal the given value."""
  supplierName_gte: String

  """All values containing the given string."""
  supplierName_contains: String

  """All values not containing the given string."""
  supplierName_not_contains: String

  """All values starting with the given string."""
  supplierName_starts_with: String

  """All values not starting with the given string."""
  supplierName_not_starts_with: String

  """All values ending with the given string."""
  supplierName_ends_with: String

  """All values not ending with the given string."""
  supplierName_not_ends_with: String
  supplierPhone: String

  """All values that are not equal to given value."""
  supplierPhone_not: String

  """All values that are contained in given list."""
  supplierPhone_in: [String!]

  """All values that are not contained in given list."""
  supplierPhone_not_in: [String!]

  """All values less than the given value."""
  supplierPhone_lt: String

  """All values less than or equal the given value."""
  supplierPhone_lte: String

  """All values greater than the given value."""
  supplierPhone_gt: String

  """All values greater than or equal the given value."""
  supplierPhone_gte: String

  """All values containing the given string."""
  supplierPhone_contains: String

  """All values not containing the given string."""
  supplierPhone_not_contains: String

  """All values starting with the given string."""
  supplierPhone_starts_with: String

  """All values not starting with the given string."""
  supplierPhone_not_starts_with: String

  """All values ending with the given string."""
  supplierPhone_ends_with: String

  """All values not ending with the given string."""
  supplierPhone_not_ends_with: String
  negotiatedRate: Int

  """All values that are not equal to given value."""
  negotiatedRate_not: Int

  """All values that are contained in given list."""
  negotiatedRate_in: [Int!]

  """All values that are not contained in given list."""
  negotiatedRate_not_in: [Int!]

  """All values less than the given value."""
  negotiatedRate_lt: Int

  """All values less than or equal the given value."""
  negotiatedRate_lte: Int

  """All values greater than the given value."""
  negotiatedRate_gt: Int

  """All values greater than or equal the given value."""
  negotiatedRate_gte: Int
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  material: MaterialsCostingWhereInput
  createdBy: UserWhereInput
  supplies_every: StoreTransactionWhereInput
  supplies_some: StoreTransactionWhereInput
  supplies_none: StoreTransactionWhereInput
  _MagicalBackRelation_MaterialRequisitionToSupplier_every: MaterialRequisitionWhereInput
  _MagicalBackRelation_MaterialRequisitionToSupplier_some: MaterialRequisitionWhereInput
  _MagicalBackRelation_MaterialRequisitionToSupplier_none: MaterialRequisitionWhereInput
}

input SupplierWhereUniqueInput {
  id: ID
}

type User implements Node {
  id: ID!
  email: String!
  password: String!
  name: String!
  personnelDetails(where: PersonnelWhereInput): Personnel
  approvedVehicleRequests(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleRequisition!]
  initiatedVehicleRequests(where: VehicleRequisitionWhereInput, orderBy: VehicleRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleRequisition!]
  approvedServiceRequests(where: RequestServiceWhereInput, orderBy: RequestServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestService!]
  initiatedServiceRequests(where: RequestServiceWhereInput, orderBy: RequestServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestService!]
  approvedRepairsRequests(where: RepairsRequisitionWhereInput, orderBy: RepairsRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RepairsRequisition!]
  initiatedRepairsRequests(where: RepairsRequisitionWhereInput, orderBy: RepairsRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RepairsRequisition!]
  initiatedMaterialRequests(where: MaterialRequisitionWhereInput, orderBy: MaterialRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [MaterialRequisition!]
  initiatedInspectionRequests(where: VehicleInspectionWhereInput, orderBy: VehicleInspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleInspection!]
  approvedInspectionRequests(where: VehicleInspectionWhereInput, orderBy: VehicleInspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleInspection!]
  role: ROLE
  locked: Boolean
  authorized: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApprovedInspectionRequestsInput {
  create: UserCreateWithoutApprovedInspectionRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApprovedRepairsRequestsInput {
  create: UserCreateWithoutApprovedRepairsRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApprovedServiceRequestsInput {
  create: UserCreateWithoutApprovedServiceRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutApprovedVehicleRequestsInput {
  create: UserCreateWithoutApprovedVehicleRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInitiatedInspectionRequestsInput {
  create: UserCreateWithoutInitiatedInspectionRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInitiatedMaterialRequestsInput {
  create: UserCreateWithoutInitiatedMaterialRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInitiatedRepairsRequestsInput {
  create: UserCreateWithoutInitiatedRepairsRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInitiatedServiceRequestsInput {
  create: UserCreateWithoutInitiatedServiceRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutInitiatedVehicleRequestsInput {
  create: UserCreateWithoutInitiatedVehicleRequestsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPersonnelDetailsInput {
  create: UserCreateWithoutPersonnelDetailsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutApprovedInspectionRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
}

input UserCreateWithoutApprovedRepairsRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutApprovedServiceRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutApprovedVehicleRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutInitiatedInspectionRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutInitiatedMaterialRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutInitiatedRepairsRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutInitiatedServiceRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutInitiatedVehicleRequestsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelCreateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

input UserCreateWithoutPersonnelDetailsInput {
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  approvedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionCreateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceCreateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceCreateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionCreateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionCreateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionCreateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionCreateManyWithoutRequestApprovedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  name_ASC
  name_DESC
  role_ASC
  role_DESC
  locked_ASC
  locked_DESC
  authorized_ASC
  authorized_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
  name: String!
  role: ROLE
  locked: Boolean
  authorized: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutApprovedInspectionRequestsInput {
  create: UserCreateWithoutApprovedInspectionRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutApprovedInspectionRequestsDataInput
  upsert: UserUpsertWithoutApprovedInspectionRequestsInput
}

input UserUpdateOneWithoutApprovedRepairsRequestsInput {
  create: UserCreateWithoutApprovedRepairsRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutApprovedRepairsRequestsDataInput
  upsert: UserUpsertWithoutApprovedRepairsRequestsInput
}

input UserUpdateOneWithoutApprovedServiceRequestsInput {
  create: UserCreateWithoutApprovedServiceRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutApprovedServiceRequestsDataInput
  upsert: UserUpsertWithoutApprovedServiceRequestsInput
}

input UserUpdateOneWithoutApprovedVehicleRequestsInput {
  create: UserCreateWithoutApprovedVehicleRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutApprovedVehicleRequestsDataInput
  upsert: UserUpsertWithoutApprovedVehicleRequestsInput
}

input UserUpdateOneWithoutInitiatedInspectionRequestsInput {
  create: UserCreateWithoutInitiatedInspectionRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInitiatedInspectionRequestsDataInput
  upsert: UserUpsertWithoutInitiatedInspectionRequestsInput
}

input UserUpdateOneWithoutInitiatedMaterialRequestsInput {
  create: UserCreateWithoutInitiatedMaterialRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInitiatedMaterialRequestsDataInput
  upsert: UserUpsertWithoutInitiatedMaterialRequestsInput
}

input UserUpdateOneWithoutInitiatedRepairsRequestsInput {
  create: UserCreateWithoutInitiatedRepairsRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInitiatedRepairsRequestsDataInput
  upsert: UserUpsertWithoutInitiatedRepairsRequestsInput
}

input UserUpdateOneWithoutInitiatedServiceRequestsInput {
  create: UserCreateWithoutInitiatedServiceRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInitiatedServiceRequestsDataInput
  upsert: UserUpsertWithoutInitiatedServiceRequestsInput
}

input UserUpdateOneWithoutInitiatedVehicleRequestsInput {
  create: UserCreateWithoutInitiatedVehicleRequestsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutInitiatedVehicleRequestsDataInput
  upsert: UserUpsertWithoutInitiatedVehicleRequestsInput
}

input UserUpdateOneWithoutPersonnelDetailsInput {
  create: UserCreateWithoutPersonnelDetailsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPersonnelDetailsDataInput
  upsert: UserUpsertWithoutPersonnelDetailsInput
}

input UserUpdateWithoutApprovedInspectionRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
}

input UserUpdateWithoutApprovedRepairsRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutApprovedServiceRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutApprovedVehicleRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutInitiatedInspectionRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutInitiatedMaterialRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutInitiatedRepairsRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutInitiatedServiceRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutInitiatedVehicleRequestsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  personnelDetails: PersonnelUpdateOneWithoutAssignedAccountInput
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpdateWithoutPersonnelDetailsDataInput {
  email: String
  password: String
  name: String
  role: ROLE
  locked: Boolean
  authorized: Boolean
  approvedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedVehicleRequests: VehicleRequisitionUpdateManyWithoutRequestedByInput
  approvedServiceRequests: RequestServiceUpdateManyWithoutRequestApprovedByInput
  initiatedServiceRequests: RequestServiceUpdateManyWithoutRequestedByInput
  approvedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestApprovedByInput
  initiatedRepairsRequests: RepairsRequisitionUpdateManyWithoutRequestedByInput
  initiatedMaterialRequests: MaterialRequisitionUpdateManyWithoutRequestedByInput
  initiatedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestedByInput
  approvedInspectionRequests: VehicleInspectionUpdateManyWithoutRequestApprovedByInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutApprovedInspectionRequestsInput {
  update: UserUpdateWithoutApprovedInspectionRequestsDataInput!
  create: UserCreateWithoutApprovedInspectionRequestsInput!
}

input UserUpsertWithoutApprovedRepairsRequestsInput {
  update: UserUpdateWithoutApprovedRepairsRequestsDataInput!
  create: UserCreateWithoutApprovedRepairsRequestsInput!
}

input UserUpsertWithoutApprovedServiceRequestsInput {
  update: UserUpdateWithoutApprovedServiceRequestsDataInput!
  create: UserCreateWithoutApprovedServiceRequestsInput!
}

input UserUpsertWithoutApprovedVehicleRequestsInput {
  update: UserUpdateWithoutApprovedVehicleRequestsDataInput!
  create: UserCreateWithoutApprovedVehicleRequestsInput!
}

input UserUpsertWithoutInitiatedInspectionRequestsInput {
  update: UserUpdateWithoutInitiatedInspectionRequestsDataInput!
  create: UserCreateWithoutInitiatedInspectionRequestsInput!
}

input UserUpsertWithoutInitiatedMaterialRequestsInput {
  update: UserUpdateWithoutInitiatedMaterialRequestsDataInput!
  create: UserCreateWithoutInitiatedMaterialRequestsInput!
}

input UserUpsertWithoutInitiatedRepairsRequestsInput {
  update: UserUpdateWithoutInitiatedRepairsRequestsDataInput!
  create: UserCreateWithoutInitiatedRepairsRequestsInput!
}

input UserUpsertWithoutInitiatedServiceRequestsInput {
  update: UserUpdateWithoutInitiatedServiceRequestsDataInput!
  create: UserCreateWithoutInitiatedServiceRequestsInput!
}

input UserUpsertWithoutInitiatedVehicleRequestsInput {
  update: UserUpdateWithoutInitiatedVehicleRequestsDataInput!
  create: UserCreateWithoutInitiatedVehicleRequestsInput!
}

input UserUpsertWithoutPersonnelDetailsInput {
  update: UserUpdateWithoutPersonnelDetailsDataInput!
  create: UserCreateWithoutPersonnelDetailsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  role: ROLE

  """All values that are not equal to given value."""
  role_not: ROLE

  """All values that are contained in given list."""
  role_in: [ROLE!]

  """All values that are not contained in given list."""
  role_not_in: [ROLE!]
  locked: Boolean

  """All values that are not equal to given value."""
  locked_not: Boolean
  authorized: Boolean

  """All values that are not equal to given value."""
  authorized_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  personnelDetails: PersonnelWhereInput
  approvedVehicleRequests_every: VehicleRequisitionWhereInput
  approvedVehicleRequests_some: VehicleRequisitionWhereInput
  approvedVehicleRequests_none: VehicleRequisitionWhereInput
  initiatedVehicleRequests_every: VehicleRequisitionWhereInput
  initiatedVehicleRequests_some: VehicleRequisitionWhereInput
  initiatedVehicleRequests_none: VehicleRequisitionWhereInput
  approvedServiceRequests_every: RequestServiceWhereInput
  approvedServiceRequests_some: RequestServiceWhereInput
  approvedServiceRequests_none: RequestServiceWhereInput
  initiatedServiceRequests_every: RequestServiceWhereInput
  initiatedServiceRequests_some: RequestServiceWhereInput
  initiatedServiceRequests_none: RequestServiceWhereInput
  approvedRepairsRequests_every: RepairsRequisitionWhereInput
  approvedRepairsRequests_some: RepairsRequisitionWhereInput
  approvedRepairsRequests_none: RepairsRequisitionWhereInput
  initiatedRepairsRequests_every: RepairsRequisitionWhereInput
  initiatedRepairsRequests_some: RepairsRequisitionWhereInput
  initiatedRepairsRequests_none: RepairsRequisitionWhereInput
  initiatedMaterialRequests_every: MaterialRequisitionWhereInput
  initiatedMaterialRequests_some: MaterialRequisitionWhereInput
  initiatedMaterialRequests_none: MaterialRequisitionWhereInput
  initiatedInspectionRequests_every: VehicleInspectionWhereInput
  initiatedInspectionRequests_some: VehicleInspectionWhereInput
  initiatedInspectionRequests_none: VehicleInspectionWhereInput
  approvedInspectionRequests_every: VehicleInspectionWhereInput
  approvedInspectionRequests_some: VehicleInspectionWhereInput
  approvedInspectionRequests_none: VehicleInspectionWhereInput
  _MagicalBackRelation_PostToUser_every: PostWhereInput
  _MagicalBackRelation_PostToUser_some: PostWhereInput
  _MagicalBackRelation_PostToUser_none: PostWhereInput
  _MagicalBackRelation_MaterialsCostingToUser_every: MaterialsCostingWhereInput
  _MagicalBackRelation_MaterialsCostingToUser_some: MaterialsCostingWhereInput
  _MagicalBackRelation_MaterialsCostingToUser_none: MaterialsCostingWhereInput
  _MagicalBackRelation_ApprovedMaterialRequests_every: MaterialRequisitionWhereInput
  _MagicalBackRelation_ApprovedMaterialRequests_some: MaterialRequisitionWhereInput
  _MagicalBackRelation_ApprovedMaterialRequests_none: MaterialRequisitionWhereInput
  _MagicalBackRelation_OtherPaymentIssueToUser_every: OtherPaymentIssueWhereInput
  _MagicalBackRelation_OtherPaymentIssueToUser_some: OtherPaymentIssueWhereInput
  _MagicalBackRelation_OtherPaymentIssueToUser_none: OtherPaymentIssueWhereInput
  _MagicalBackRelation_SupplierToUser_every: SupplierWhereInput
  _MagicalBackRelation_SupplierToUser_some: SupplierWhereInput
  _MagicalBackRelation_SupplierToUser_none: SupplierWhereInput
  _MagicalBackRelation_PaymentIssueToUser_every: PaymentIssueWhereInput
  _MagicalBackRelation_PaymentIssueToUser_some: PaymentIssueWhereInput
  _MagicalBackRelation_PaymentIssueToUser_none: PaymentIssueWhereInput
  _MagicalBackRelation_StoreTransactionToUser_every: StoreTransactionWhereInput
  _MagicalBackRelation_StoreTransactionToUser_some: StoreTransactionWhereInput
  _MagicalBackRelation_StoreTransactionToUser_none: StoreTransactionWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type Vehicle implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  owner(where: VehicleOwnerWhereInput): VehicleOwner!
  assigned: Boolean!
  assignee(where: PersonnelWhereInput): Personnel
  dateAssigned: DateTime
  repairs(where: RepairsRequisitionWhereInput, orderBy: RepairsRequisitionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RepairsRequisition!]
  service(where: RequestServiceWhereInput, orderBy: RequestServiceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RequestService!]
  inspection(where: VehicleInspectionWhereInput, orderBy: VehicleInspectionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [VehicleInspection!]
}

type VehicleAssignment implements Node {
  id: ID!
  motorVehicle(where: VehicleWhereInput): Vehicle!
  assignee(where: PersonnelWhereInput): Personnel!
  dateOfAssignment: DateTime!
  dateRelieved: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type VehicleAssignmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleAssignmentEdge]!
  aggregate: AggregateVehicleAssignment!
}

input VehicleAssignmentCreateInput {
  dateOfAssignment: DateTime!
  dateRelieved: DateTime
  motorVehicle: VehicleCreateOneInput!
  assignee: PersonnelCreateOneInput!
}

"""An edge in a connection."""
type VehicleAssignmentEdge {
  """The item at the end of the edge."""
  node: VehicleAssignment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleAssignmentOrderByInput {
  id_ASC
  id_DESC
  dateOfAssignment_ASC
  dateOfAssignment_DESC
  dateRelieved_ASC
  dateRelieved_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VehicleAssignmentPreviousValues {
  id: ID!
  dateOfAssignment: DateTime!
  dateRelieved: DateTime
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VehicleAssignmentSubscriptionPayload {
  mutation: MutationType!
  node: VehicleAssignment
  updatedFields: [String!]
  previousValues: VehicleAssignmentPreviousValues
}

input VehicleAssignmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleAssignmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleAssignmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleAssignmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleAssignmentWhereInput
}

input VehicleAssignmentUpdateInput {
  dateOfAssignment: DateTime
  dateRelieved: DateTime
  motorVehicle: VehicleUpdateOneInput
  assignee: PersonnelUpdateOneInput
}

input VehicleAssignmentWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleAssignmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleAssignmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleAssignmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  dateOfAssignment: DateTime

  """All values that are not equal to given value."""
  dateOfAssignment_not: DateTime

  """All values that are contained in given list."""
  dateOfAssignment_in: [DateTime!]

  """All values that are not contained in given list."""
  dateOfAssignment_not_in: [DateTime!]

  """All values less than the given value."""
  dateOfAssignment_lt: DateTime

  """All values less than or equal the given value."""
  dateOfAssignment_lte: DateTime

  """All values greater than the given value."""
  dateOfAssignment_gt: DateTime

  """All values greater than or equal the given value."""
  dateOfAssignment_gte: DateTime
  dateRelieved: DateTime

  """All values that are not equal to given value."""
  dateRelieved_not: DateTime

  """All values that are contained in given list."""
  dateRelieved_in: [DateTime!]

  """All values that are not contained in given list."""
  dateRelieved_not_in: [DateTime!]

  """All values less than the given value."""
  dateRelieved_lt: DateTime

  """All values less than or equal the given value."""
  dateRelieved_lte: DateTime

  """All values greater than the given value."""
  dateRelieved_gt: DateTime

  """All values greater than or equal the given value."""
  dateRelieved_gte: DateTime
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  motorVehicle: VehicleWhereInput
  assignee: PersonnelWhereInput
}

input VehicleAssignmentWhereUniqueInput {
  id: ID
}

"""A connection to a list of items."""
type VehicleConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleEdge]!
  aggregate: AggregateVehicle!
}

input VehicleCreateInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerCreateOneWithoutVehiclesInput!
  assignee: PersonnelCreateOneInput
  repairs: RepairsRequisitionCreateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceCreateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionCreateManyWithoutVehicleToBeInspectedInput
}

input VehicleCreateManyWithoutOwnerInput {
  create: [VehicleCreateWithoutOwnerInput!]
  connect: [VehicleWhereUniqueInput!]
}

input VehicleCreateOneInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
}

input VehicleCreateOneWithoutInspectionInput {
  create: VehicleCreateWithoutInspectionInput
  connect: VehicleWhereUniqueInput
}

input VehicleCreateOneWithoutRepairsInput {
  create: VehicleCreateWithoutRepairsInput
  connect: VehicleWhereUniqueInput
}

input VehicleCreateOneWithoutServiceInput {
  create: VehicleCreateWithoutServiceInput
  connect: VehicleWhereUniqueInput
}

input VehicleCreateWithoutInspectionInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerCreateOneWithoutVehiclesInput!
  assignee: PersonnelCreateOneInput
  repairs: RepairsRequisitionCreateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceCreateManyWithoutVehicleToBeServicedInput
}

input VehicleCreateWithoutOwnerInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  assignee: PersonnelCreateOneInput
  repairs: RepairsRequisitionCreateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceCreateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionCreateManyWithoutVehicleToBeInspectedInput
}

input VehicleCreateWithoutRepairsInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerCreateOneWithoutVehiclesInput!
  assignee: PersonnelCreateOneInput
  service: RequestServiceCreateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionCreateManyWithoutVehicleToBeInspectedInput
}

input VehicleCreateWithoutServiceInput {
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerCreateOneWithoutVehiclesInput!
  assignee: PersonnelCreateOneInput
  repairs: RepairsRequisitionCreateManyWithoutVehicleToBeRepairedInput
  inspection: VehicleInspectionCreateManyWithoutVehicleToBeInspectedInput
}

"""An edge in a connection."""
type VehicleEdge {
  """The item at the end of the edge."""
  node: Vehicle!

  """A cursor for use in pagination."""
  cursor: String!
}

type VehicleInspection implements Node {
  id: ID!
  requestedBy(where: UserWhereInput): User
  vehicleToBeInspected(where: VehicleWhereInput): Vehicle!
  approxCostOfInspection: Int
  requestApprovedBy(where: UserWhereInput): User
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  paymentsDetails(where: PaymentIssueWhereInput): PaymentIssue
  createdAt: DateTime!
  dateInspected: DateTime
  updatedAt: DateTime!
}

"""A connection to a list of items."""
type VehicleInspectionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleInspectionEdge]!
  aggregate: AggregateVehicleInspection!
}

input VehicleInspectionCreateInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserCreateOneWithoutInitiatedInspectionRequestsInput
  vehicleToBeInspected: VehicleCreateOneWithoutInspectionInput!
  requestApprovedBy: UserCreateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueCreateOneInput
}

input VehicleInspectionCreateManyWithoutRequestApprovedByInput {
  create: [VehicleInspectionCreateWithoutRequestApprovedByInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
}

input VehicleInspectionCreateManyWithoutRequestedByInput {
  create: [VehicleInspectionCreateWithoutRequestedByInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
}

input VehicleInspectionCreateManyWithoutVehicleToBeInspectedInput {
  create: [VehicleInspectionCreateWithoutVehicleToBeInspectedInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
}

input VehicleInspectionCreateWithoutRequestApprovedByInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserCreateOneWithoutInitiatedInspectionRequestsInput
  vehicleToBeInspected: VehicleCreateOneWithoutInspectionInput!
  paymentsDetails: PaymentIssueCreateOneInput
}

input VehicleInspectionCreateWithoutRequestedByInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  vehicleToBeInspected: VehicleCreateOneWithoutInspectionInput!
  requestApprovedBy: UserCreateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueCreateOneInput
}

input VehicleInspectionCreateWithoutVehicleToBeInspectedInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserCreateOneWithoutInitiatedInspectionRequestsInput
  requestApprovedBy: UserCreateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueCreateOneInput
}

"""An edge in a connection."""
type VehicleInspectionEdge {
  """The item at the end of the edge."""
  node: VehicleInspection!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleInspectionOrderByInput {
  id_ASC
  id_DESC
  approxCostOfInspection_ASC
  approxCostOfInspection_DESC
  approvalDate_ASC
  approvalDate_DESC
  approvalStatus_ASC
  approvalStatus_DESC
  otherDetails_ASC
  otherDetails_DESC
  issuedCash_ASC
  issuedCash_DESC
  createdAt_ASC
  createdAt_DESC
  dateInspected_ASC
  dateInspected_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VehicleInspectionPreviousValues {
  id: ID!
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  createdAt: DateTime!
  dateInspected: DateTime
  updatedAt: DateTime!
}

type VehicleInspectionSubscriptionPayload {
  mutation: MutationType!
  node: VehicleInspection
  updatedFields: [String!]
  previousValues: VehicleInspectionPreviousValues
}

input VehicleInspectionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleInspectionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleInspectionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleInspectionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleInspectionWhereInput
}

input VehicleInspectionUpdateInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedInspectionRequestsInput
  vehicleToBeInspected: VehicleUpdateOneWithoutInspectionInput
  requestApprovedBy: UserUpdateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueUpdateOneInput
}

input VehicleInspectionUpdateManyWithoutRequestApprovedByInput {
  create: [VehicleInspectionCreateWithoutRequestApprovedByInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
  disconnect: [VehicleInspectionWhereUniqueInput!]
  delete: [VehicleInspectionWhereUniqueInput!]
  update: [VehicleInspectionUpdateWithWhereUniqueWithoutRequestApprovedByInput!]
  upsert: [VehicleInspectionUpsertWithWhereUniqueWithoutRequestApprovedByInput!]
}

input VehicleInspectionUpdateManyWithoutRequestedByInput {
  create: [VehicleInspectionCreateWithoutRequestedByInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
  disconnect: [VehicleInspectionWhereUniqueInput!]
  delete: [VehicleInspectionWhereUniqueInput!]
  update: [VehicleInspectionUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [VehicleInspectionUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput {
  create: [VehicleInspectionCreateWithoutVehicleToBeInspectedInput!]
  connect: [VehicleInspectionWhereUniqueInput!]
  disconnect: [VehicleInspectionWhereUniqueInput!]
  delete: [VehicleInspectionWhereUniqueInput!]
  update: [VehicleInspectionUpdateWithWhereUniqueWithoutVehicleToBeInspectedInput!]
  upsert: [VehicleInspectionUpsertWithWhereUniqueWithoutVehicleToBeInspectedInput!]
}

input VehicleInspectionUpdateWithoutRequestApprovedByDataInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedInspectionRequestsInput
  vehicleToBeInspected: VehicleUpdateOneWithoutInspectionInput
  paymentsDetails: PaymentIssueUpdateOneInput
}

input VehicleInspectionUpdateWithoutRequestedByDataInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  vehicleToBeInspected: VehicleUpdateOneWithoutInspectionInput
  requestApprovedBy: UserUpdateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueUpdateOneInput
}

input VehicleInspectionUpdateWithoutVehicleToBeInspectedDataInput {
  approxCostOfInspection: Int
  approvalDate: DateTime
  approvalStatus: Boolean
  otherDetails: String
  issuedCash: Boolean
  dateInspected: DateTime
  requestedBy: UserUpdateOneWithoutInitiatedInspectionRequestsInput
  requestApprovedBy: UserUpdateOneWithoutApprovedInspectionRequestsInput
  paymentsDetails: PaymentIssueUpdateOneInput
}

input VehicleInspectionUpdateWithWhereUniqueWithoutRequestApprovedByInput {
  where: VehicleInspectionWhereUniqueInput!
  data: VehicleInspectionUpdateWithoutRequestApprovedByDataInput!
}

input VehicleInspectionUpdateWithWhereUniqueWithoutRequestedByInput {
  where: VehicleInspectionWhereUniqueInput!
  data: VehicleInspectionUpdateWithoutRequestedByDataInput!
}

input VehicleInspectionUpdateWithWhereUniqueWithoutVehicleToBeInspectedInput {
  where: VehicleInspectionWhereUniqueInput!
  data: VehicleInspectionUpdateWithoutVehicleToBeInspectedDataInput!
}

input VehicleInspectionUpsertWithWhereUniqueWithoutRequestApprovedByInput {
  where: VehicleInspectionWhereUniqueInput!
  update: VehicleInspectionUpdateWithoutRequestApprovedByDataInput!
  create: VehicleInspectionCreateWithoutRequestApprovedByInput!
}

input VehicleInspectionUpsertWithWhereUniqueWithoutRequestedByInput {
  where: VehicleInspectionWhereUniqueInput!
  update: VehicleInspectionUpdateWithoutRequestedByDataInput!
  create: VehicleInspectionCreateWithoutRequestedByInput!
}

input VehicleInspectionUpsertWithWhereUniqueWithoutVehicleToBeInspectedInput {
  where: VehicleInspectionWhereUniqueInput!
  update: VehicleInspectionUpdateWithoutVehicleToBeInspectedDataInput!
  create: VehicleInspectionCreateWithoutVehicleToBeInspectedInput!
}

input VehicleInspectionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleInspectionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleInspectionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleInspectionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  approxCostOfInspection: Int

  """All values that are not equal to given value."""
  approxCostOfInspection_not: Int

  """All values that are contained in given list."""
  approxCostOfInspection_in: [Int!]

  """All values that are not contained in given list."""
  approxCostOfInspection_not_in: [Int!]

  """All values less than the given value."""
  approxCostOfInspection_lt: Int

  """All values less than or equal the given value."""
  approxCostOfInspection_lte: Int

  """All values greater than the given value."""
  approxCostOfInspection_gt: Int

  """All values greater than or equal the given value."""
  approxCostOfInspection_gte: Int
  approvalDate: DateTime

  """All values that are not equal to given value."""
  approvalDate_not: DateTime

  """All values that are contained in given list."""
  approvalDate_in: [DateTime!]

  """All values that are not contained in given list."""
  approvalDate_not_in: [DateTime!]

  """All values less than the given value."""
  approvalDate_lt: DateTime

  """All values less than or equal the given value."""
  approvalDate_lte: DateTime

  """All values greater than the given value."""
  approvalDate_gt: DateTime

  """All values greater than or equal the given value."""
  approvalDate_gte: DateTime
  approvalStatus: Boolean

  """All values that are not equal to given value."""
  approvalStatus_not: Boolean
  otherDetails: String

  """All values that are not equal to given value."""
  otherDetails_not: String

  """All values that are contained in given list."""
  otherDetails_in: [String!]

  """All values that are not contained in given list."""
  otherDetails_not_in: [String!]

  """All values less than the given value."""
  otherDetails_lt: String

  """All values less than or equal the given value."""
  otherDetails_lte: String

  """All values greater than the given value."""
  otherDetails_gt: String

  """All values greater than or equal the given value."""
  otherDetails_gte: String

  """All values containing the given string."""
  otherDetails_contains: String

  """All values not containing the given string."""
  otherDetails_not_contains: String

  """All values starting with the given string."""
  otherDetails_starts_with: String

  """All values not starting with the given string."""
  otherDetails_not_starts_with: String

  """All values ending with the given string."""
  otherDetails_ends_with: String

  """All values not ending with the given string."""
  otherDetails_not_ends_with: String
  issuedCash: Boolean

  """All values that are not equal to given value."""
  issuedCash_not: Boolean
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  dateInspected: DateTime

  """All values that are not equal to given value."""
  dateInspected_not: DateTime

  """All values that are contained in given list."""
  dateInspected_in: [DateTime!]

  """All values that are not contained in given list."""
  dateInspected_not_in: [DateTime!]

  """All values less than the given value."""
  dateInspected_lt: DateTime

  """All values less than or equal the given value."""
  dateInspected_lte: DateTime

  """All values greater than the given value."""
  dateInspected_gt: DateTime

  """All values greater than or equal the given value."""
  dateInspected_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  requestedBy: UserWhereInput
  vehicleToBeInspected: VehicleWhereInput
  requestApprovedBy: UserWhereInput
  paymentsDetails: PaymentIssueWhereInput
}

input VehicleInspectionWhereUniqueInput {
  id: ID
}

enum VehicleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  registrationNumber_ASC
  registrationNumber_DESC
  logBookNumber_ASC
  logBookNumber_DESC
  model_ASC
  model_DESC
  fuelType_ASC
  fuelType_DESC
  insuranceValuation_ASC
  insuranceValuation_DESC
  insuranceRenewalDate_ASC
  insuranceRenewalDate_DESC
  manufactureDate_ASC
  manufactureDate_DESC
  assigned_ASC
  assigned_DESC
  dateAssigned_ASC
  dateAssigned_DESC
}

type VehicleOwner implements Node {
  id: ID!
  name: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  vehicles(where: VehicleWhereInput, orderBy: VehicleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Vehicle!]
}

"""A connection to a list of items."""
type VehicleOwnerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleOwnerEdge]!
  aggregate: AggregateVehicleOwner!
}

input VehicleOwnerCreateInput {
  name: String!
  phone: String!
  email: String!
  vehicles: VehicleCreateManyWithoutOwnerInput
}

input VehicleOwnerCreateOneWithoutVehiclesInput {
  create: VehicleOwnerCreateWithoutVehiclesInput
  connect: VehicleOwnerWhereUniqueInput
}

input VehicleOwnerCreateWithoutVehiclesInput {
  name: String!
  phone: String!
  email: String!
}

"""An edge in a connection."""
type VehicleOwnerEdge {
  """The item at the end of the edge."""
  node: VehicleOwner!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleOwnerOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
  email_ASC
  email_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type VehicleOwnerPreviousValues {
  id: ID!
  name: String!
  phone: String!
  email: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type VehicleOwnerSubscriptionPayload {
  mutation: MutationType!
  node: VehicleOwner
  updatedFields: [String!]
  previousValues: VehicleOwnerPreviousValues
}

input VehicleOwnerSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleOwnerSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleOwnerSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleOwnerSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleOwnerWhereInput
}

input VehicleOwnerUpdateInput {
  name: String
  phone: String
  email: String
  vehicles: VehicleUpdateManyWithoutOwnerInput
}

input VehicleOwnerUpdateOneWithoutVehiclesInput {
  create: VehicleOwnerCreateWithoutVehiclesInput
  connect: VehicleOwnerWhereUniqueInput
  delete: Boolean
  update: VehicleOwnerUpdateWithoutVehiclesDataInput
  upsert: VehicleOwnerUpsertWithoutVehiclesInput
}

input VehicleOwnerUpdateWithoutVehiclesDataInput {
  name: String
  phone: String
  email: String
}

input VehicleOwnerUpsertWithoutVehiclesInput {
  update: VehicleOwnerUpdateWithoutVehiclesDataInput!
  create: VehicleOwnerCreateWithoutVehiclesInput!
}

input VehicleOwnerWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleOwnerWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleOwnerWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleOwnerWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  phone: String

  """All values that are not equal to given value."""
  phone_not: String

  """All values that are contained in given list."""
  phone_in: [String!]

  """All values that are not contained in given list."""
  phone_not_in: [String!]

  """All values less than the given value."""
  phone_lt: String

  """All values less than or equal the given value."""
  phone_lte: String

  """All values greater than the given value."""
  phone_gt: String

  """All values greater than or equal the given value."""
  phone_gte: String

  """All values containing the given string."""
  phone_contains: String

  """All values not containing the given string."""
  phone_not_contains: String

  """All values starting with the given string."""
  phone_starts_with: String

  """All values not starting with the given string."""
  phone_not_starts_with: String

  """All values ending with the given string."""
  phone_ends_with: String

  """All values not ending with the given string."""
  phone_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  vehicles_every: VehicleWhereInput
  vehicles_some: VehicleWhereInput
  vehicles_none: VehicleWhereInput
}

input VehicleOwnerWhereUniqueInput {
  id: ID
  name: String
}

type VehiclePreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  registrationNumber: String!
  logBookNumber: String!
  model: String!
  fuelType: String!
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean!
  dateAssigned: DateTime
}

type VehicleRequisition implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: Boolean!
  requestApprovedBy(where: UserWhereInput): User
  requestedBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type VehicleRequisitionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [VehicleRequisitionEdge]!
  aggregate: AggregateVehicleRequisition!
}

input VehicleRequisitionCreateInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: Boolean
  requestApprovedBy: UserCreateOneWithoutApprovedVehicleRequestsInput
  requestedBy: UserCreateOneWithoutInitiatedVehicleRequestsInput
}

input VehicleRequisitionCreateManyWithoutRequestApprovedByInput {
  create: [VehicleRequisitionCreateWithoutRequestApprovedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
}

input VehicleRequisitionCreateManyWithoutRequestedByInput {
  create: [VehicleRequisitionCreateWithoutRequestedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
}

input VehicleRequisitionCreateWithoutRequestApprovedByInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: Boolean
  requestedBy: UserCreateOneWithoutInitiatedVehicleRequestsInput
}

input VehicleRequisitionCreateWithoutRequestedByInput {
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: Boolean
  requestApprovedBy: UserCreateOneWithoutApprovedVehicleRequestsInput
}

"""An edge in a connection."""
type VehicleRequisitionEdge {
  """The item at the end of the edge."""
  node: VehicleRequisition!

  """A cursor for use in pagination."""
  cursor: String!
}

enum VehicleRequisitionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  vehicleType_ASC
  vehicleType_DESC
  estimatedNoOfHours_ASC
  estimatedNoOfHours_DESC
  project_ASC
  project_DESC
  section_ASC
  section_DESC
  estimatedCost_ASC
  estimatedCost_DESC
  requestStatus_ASC
  requestStatus_DESC
}

type VehicleRequisitionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  vehicleType: String!
  estimatedNoOfHours: Int!
  project: String!
  section: String!
  estimatedCost: Int
  requestStatus: Boolean!
}

type VehicleRequisitionSubscriptionPayload {
  mutation: MutationType!
  node: VehicleRequisition
  updatedFields: [String!]
  previousValues: VehicleRequisitionPreviousValues
}

input VehicleRequisitionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleRequisitionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleRequisitionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleRequisitionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleRequisitionWhereInput
}

input VehicleRequisitionUpdateInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: Boolean
  requestApprovedBy: UserUpdateOneWithoutApprovedVehicleRequestsInput
  requestedBy: UserUpdateOneWithoutInitiatedVehicleRequestsInput
}

input VehicleRequisitionUpdateManyWithoutRequestApprovedByInput {
  create: [VehicleRequisitionCreateWithoutRequestApprovedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
  disconnect: [VehicleRequisitionWhereUniqueInput!]
  delete: [VehicleRequisitionWhereUniqueInput!]
  update: [VehicleRequisitionUpdateWithWhereUniqueWithoutRequestApprovedByInput!]
  upsert: [VehicleRequisitionUpsertWithWhereUniqueWithoutRequestApprovedByInput!]
}

input VehicleRequisitionUpdateManyWithoutRequestedByInput {
  create: [VehicleRequisitionCreateWithoutRequestedByInput!]
  connect: [VehicleRequisitionWhereUniqueInput!]
  disconnect: [VehicleRequisitionWhereUniqueInput!]
  delete: [VehicleRequisitionWhereUniqueInput!]
  update: [VehicleRequisitionUpdateWithWhereUniqueWithoutRequestedByInput!]
  upsert: [VehicleRequisitionUpsertWithWhereUniqueWithoutRequestedByInput!]
}

input VehicleRequisitionUpdateWithoutRequestApprovedByDataInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: Boolean
  requestedBy: UserUpdateOneWithoutInitiatedVehicleRequestsInput
}

input VehicleRequisitionUpdateWithoutRequestedByDataInput {
  vehicleType: String
  estimatedNoOfHours: Int
  project: String
  section: String
  estimatedCost: Int
  requestStatus: Boolean
  requestApprovedBy: UserUpdateOneWithoutApprovedVehicleRequestsInput
}

input VehicleRequisitionUpdateWithWhereUniqueWithoutRequestApprovedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  data: VehicleRequisitionUpdateWithoutRequestApprovedByDataInput!
}

input VehicleRequisitionUpdateWithWhereUniqueWithoutRequestedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  data: VehicleRequisitionUpdateWithoutRequestedByDataInput!
}

input VehicleRequisitionUpsertWithWhereUniqueWithoutRequestApprovedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  update: VehicleRequisitionUpdateWithoutRequestApprovedByDataInput!
  create: VehicleRequisitionCreateWithoutRequestApprovedByInput!
}

input VehicleRequisitionUpsertWithWhereUniqueWithoutRequestedByInput {
  where: VehicleRequisitionWhereUniqueInput!
  update: VehicleRequisitionUpdateWithoutRequestedByDataInput!
  create: VehicleRequisitionCreateWithoutRequestedByInput!
}

input VehicleRequisitionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleRequisitionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleRequisitionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleRequisitionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  vehicleType: String

  """All values that are not equal to given value."""
  vehicleType_not: String

  """All values that are contained in given list."""
  vehicleType_in: [String!]

  """All values that are not contained in given list."""
  vehicleType_not_in: [String!]

  """All values less than the given value."""
  vehicleType_lt: String

  """All values less than or equal the given value."""
  vehicleType_lte: String

  """All values greater than the given value."""
  vehicleType_gt: String

  """All values greater than or equal the given value."""
  vehicleType_gte: String

  """All values containing the given string."""
  vehicleType_contains: String

  """All values not containing the given string."""
  vehicleType_not_contains: String

  """All values starting with the given string."""
  vehicleType_starts_with: String

  """All values not starting with the given string."""
  vehicleType_not_starts_with: String

  """All values ending with the given string."""
  vehicleType_ends_with: String

  """All values not ending with the given string."""
  vehicleType_not_ends_with: String
  estimatedNoOfHours: Int

  """All values that are not equal to given value."""
  estimatedNoOfHours_not: Int

  """All values that are contained in given list."""
  estimatedNoOfHours_in: [Int!]

  """All values that are not contained in given list."""
  estimatedNoOfHours_not_in: [Int!]

  """All values less than the given value."""
  estimatedNoOfHours_lt: Int

  """All values less than or equal the given value."""
  estimatedNoOfHours_lte: Int

  """All values greater than the given value."""
  estimatedNoOfHours_gt: Int

  """All values greater than or equal the given value."""
  estimatedNoOfHours_gte: Int
  project: String

  """All values that are not equal to given value."""
  project_not: String

  """All values that are contained in given list."""
  project_in: [String!]

  """All values that are not contained in given list."""
  project_not_in: [String!]

  """All values less than the given value."""
  project_lt: String

  """All values less than or equal the given value."""
  project_lte: String

  """All values greater than the given value."""
  project_gt: String

  """All values greater than or equal the given value."""
  project_gte: String

  """All values containing the given string."""
  project_contains: String

  """All values not containing the given string."""
  project_not_contains: String

  """All values starting with the given string."""
  project_starts_with: String

  """All values not starting with the given string."""
  project_not_starts_with: String

  """All values ending with the given string."""
  project_ends_with: String

  """All values not ending with the given string."""
  project_not_ends_with: String
  section: String

  """All values that are not equal to given value."""
  section_not: String

  """All values that are contained in given list."""
  section_in: [String!]

  """All values that are not contained in given list."""
  section_not_in: [String!]

  """All values less than the given value."""
  section_lt: String

  """All values less than or equal the given value."""
  section_lte: String

  """All values greater than the given value."""
  section_gt: String

  """All values greater than or equal the given value."""
  section_gte: String

  """All values containing the given string."""
  section_contains: String

  """All values not containing the given string."""
  section_not_contains: String

  """All values starting with the given string."""
  section_starts_with: String

  """All values not starting with the given string."""
  section_not_starts_with: String

  """All values ending with the given string."""
  section_ends_with: String

  """All values not ending with the given string."""
  section_not_ends_with: String
  estimatedCost: Int

  """All values that are not equal to given value."""
  estimatedCost_not: Int

  """All values that are contained in given list."""
  estimatedCost_in: [Int!]

  """All values that are not contained in given list."""
  estimatedCost_not_in: [Int!]

  """All values less than the given value."""
  estimatedCost_lt: Int

  """All values less than or equal the given value."""
  estimatedCost_lte: Int

  """All values greater than the given value."""
  estimatedCost_gt: Int

  """All values greater than or equal the given value."""
  estimatedCost_gte: Int
  requestStatus: Boolean

  """All values that are not equal to given value."""
  requestStatus_not: Boolean
  requestApprovedBy: UserWhereInput
  requestedBy: UserWhereInput
}

input VehicleRequisitionWhereUniqueInput {
  id: ID
}

type VehicleSubscriptionPayload {
  mutation: MutationType!
  node: Vehicle
  updatedFields: [String!]
  previousValues: VehiclePreviousValues
}

input VehicleSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: VehicleWhereInput
}

input VehicleUpdateDataInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerUpdateOneWithoutVehiclesInput
  assignee: PersonnelUpdateOneInput
  repairs: RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceUpdateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput
}

input VehicleUpdateInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerUpdateOneWithoutVehiclesInput
  assignee: PersonnelUpdateOneInput
  repairs: RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceUpdateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput
}

input VehicleUpdateManyWithoutOwnerInput {
  create: [VehicleCreateWithoutOwnerInput!]
  connect: [VehicleWhereUniqueInput!]
  disconnect: [VehicleWhereUniqueInput!]
  delete: [VehicleWhereUniqueInput!]
  update: [VehicleUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [VehicleUpsertWithWhereUniqueWithoutOwnerInput!]
}

input VehicleUpdateOneInput {
  create: VehicleCreateInput
  connect: VehicleWhereUniqueInput
  delete: Boolean
  update: VehicleUpdateDataInput
  upsert: VehicleUpsertNestedInput
}

input VehicleUpdateOneWithoutInspectionInput {
  create: VehicleCreateWithoutInspectionInput
  connect: VehicleWhereUniqueInput
  delete: Boolean
  update: VehicleUpdateWithoutInspectionDataInput
  upsert: VehicleUpsertWithoutInspectionInput
}

input VehicleUpdateOneWithoutRepairsInput {
  create: VehicleCreateWithoutRepairsInput
  connect: VehicleWhereUniqueInput
  delete: Boolean
  update: VehicleUpdateWithoutRepairsDataInput
  upsert: VehicleUpsertWithoutRepairsInput
}

input VehicleUpdateOneWithoutServiceInput {
  create: VehicleCreateWithoutServiceInput
  connect: VehicleWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: VehicleUpdateWithoutServiceDataInput
  upsert: VehicleUpsertWithoutServiceInput
}

input VehicleUpdateWithoutInspectionDataInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerUpdateOneWithoutVehiclesInput
  assignee: PersonnelUpdateOneInput
  repairs: RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceUpdateManyWithoutVehicleToBeServicedInput
}

input VehicleUpdateWithoutOwnerDataInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  assignee: PersonnelUpdateOneInput
  repairs: RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput
  service: RequestServiceUpdateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput
}

input VehicleUpdateWithoutRepairsDataInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerUpdateOneWithoutVehiclesInput
  assignee: PersonnelUpdateOneInput
  service: RequestServiceUpdateManyWithoutVehicleToBeServicedInput
  inspection: VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput
}

input VehicleUpdateWithoutServiceDataInput {
  registrationNumber: String
  logBookNumber: String
  model: String
  fuelType: String
  insuranceValuation: Int
  insuranceRenewalDate: DateTime
  manufactureDate: DateTime
  assigned: Boolean
  dateAssigned: DateTime
  owner: VehicleOwnerUpdateOneWithoutVehiclesInput
  assignee: PersonnelUpdateOneInput
  repairs: RepairsRequisitionUpdateManyWithoutVehicleToBeRepairedInput
  inspection: VehicleInspectionUpdateManyWithoutVehicleToBeInspectedInput
}

input VehicleUpdateWithWhereUniqueWithoutOwnerInput {
  where: VehicleWhereUniqueInput!
  data: VehicleUpdateWithoutOwnerDataInput!
}

input VehicleUpsertNestedInput {
  update: VehicleUpdateDataInput!
  create: VehicleCreateInput!
}

input VehicleUpsertWithoutInspectionInput {
  update: VehicleUpdateWithoutInspectionDataInput!
  create: VehicleCreateWithoutInspectionInput!
}

input VehicleUpsertWithoutRepairsInput {
  update: VehicleUpdateWithoutRepairsDataInput!
  create: VehicleCreateWithoutRepairsInput!
}

input VehicleUpsertWithoutServiceInput {
  update: VehicleUpdateWithoutServiceDataInput!
  create: VehicleCreateWithoutServiceInput!
}

input VehicleUpsertWithWhereUniqueWithoutOwnerInput {
  where: VehicleWhereUniqueInput!
  update: VehicleUpdateWithoutOwnerDataInput!
  create: VehicleCreateWithoutOwnerInput!
}

input VehicleWhereInput {
  """Logical AND on all given filters."""
  AND: [VehicleWhereInput!]

  """Logical OR on all given filters."""
  OR: [VehicleWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [VehicleWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  registrationNumber: String

  """All values that are not equal to given value."""
  registrationNumber_not: String

  """All values that are contained in given list."""
  registrationNumber_in: [String!]

  """All values that are not contained in given list."""
  registrationNumber_not_in: [String!]

  """All values less than the given value."""
  registrationNumber_lt: String

  """All values less than or equal the given value."""
  registrationNumber_lte: String

  """All values greater than the given value."""
  registrationNumber_gt: String

  """All values greater than or equal the given value."""
  registrationNumber_gte: String

  """All values containing the given string."""
  registrationNumber_contains: String

  """All values not containing the given string."""
  registrationNumber_not_contains: String

  """All values starting with the given string."""
  registrationNumber_starts_with: String

  """All values not starting with the given string."""
  registrationNumber_not_starts_with: String

  """All values ending with the given string."""
  registrationNumber_ends_with: String

  """All values not ending with the given string."""
  registrationNumber_not_ends_with: String
  logBookNumber: String

  """All values that are not equal to given value."""
  logBookNumber_not: String

  """All values that are contained in given list."""
  logBookNumber_in: [String!]

  """All values that are not contained in given list."""
  logBookNumber_not_in: [String!]

  """All values less than the given value."""
  logBookNumber_lt: String

  """All values less than or equal the given value."""
  logBookNumber_lte: String

  """All values greater than the given value."""
  logBookNumber_gt: String

  """All values greater than or equal the given value."""
  logBookNumber_gte: String

  """All values containing the given string."""
  logBookNumber_contains: String

  """All values not containing the given string."""
  logBookNumber_not_contains: String

  """All values starting with the given string."""
  logBookNumber_starts_with: String

  """All values not starting with the given string."""
  logBookNumber_not_starts_with: String

  """All values ending with the given string."""
  logBookNumber_ends_with: String

  """All values not ending with the given string."""
  logBookNumber_not_ends_with: String
  model: String

  """All values that are not equal to given value."""
  model_not: String

  """All values that are contained in given list."""
  model_in: [String!]

  """All values that are not contained in given list."""
  model_not_in: [String!]

  """All values less than the given value."""
  model_lt: String

  """All values less than or equal the given value."""
  model_lte: String

  """All values greater than the given value."""
  model_gt: String

  """All values greater than or equal the given value."""
  model_gte: String

  """All values containing the given string."""
  model_contains: String

  """All values not containing the given string."""
  model_not_contains: String

  """All values starting with the given string."""
  model_starts_with: String

  """All values not starting with the given string."""
  model_not_starts_with: String

  """All values ending with the given string."""
  model_ends_with: String

  """All values not ending with the given string."""
  model_not_ends_with: String
  fuelType: String

  """All values that are not equal to given value."""
  fuelType_not: String

  """All values that are contained in given list."""
  fuelType_in: [String!]

  """All values that are not contained in given list."""
  fuelType_not_in: [String!]

  """All values less than the given value."""
  fuelType_lt: String

  """All values less than or equal the given value."""
  fuelType_lte: String

  """All values greater than the given value."""
  fuelType_gt: String

  """All values greater than or equal the given value."""
  fuelType_gte: String

  """All values containing the given string."""
  fuelType_contains: String

  """All values not containing the given string."""
  fuelType_not_contains: String

  """All values starting with the given string."""
  fuelType_starts_with: String

  """All values not starting with the given string."""
  fuelType_not_starts_with: String

  """All values ending with the given string."""
  fuelType_ends_with: String

  """All values not ending with the given string."""
  fuelType_not_ends_with: String
  insuranceValuation: Int

  """All values that are not equal to given value."""
  insuranceValuation_not: Int

  """All values that are contained in given list."""
  insuranceValuation_in: [Int!]

  """All values that are not contained in given list."""
  insuranceValuation_not_in: [Int!]

  """All values less than the given value."""
  insuranceValuation_lt: Int

  """All values less than or equal the given value."""
  insuranceValuation_lte: Int

  """All values greater than the given value."""
  insuranceValuation_gt: Int

  """All values greater than or equal the given value."""
  insuranceValuation_gte: Int
  insuranceRenewalDate: DateTime

  """All values that are not equal to given value."""
  insuranceRenewalDate_not: DateTime

  """All values that are contained in given list."""
  insuranceRenewalDate_in: [DateTime!]

  """All values that are not contained in given list."""
  insuranceRenewalDate_not_in: [DateTime!]

  """All values less than the given value."""
  insuranceRenewalDate_lt: DateTime

  """All values less than or equal the given value."""
  insuranceRenewalDate_lte: DateTime

  """All values greater than the given value."""
  insuranceRenewalDate_gt: DateTime

  """All values greater than or equal the given value."""
  insuranceRenewalDate_gte: DateTime
  manufactureDate: DateTime

  """All values that are not equal to given value."""
  manufactureDate_not: DateTime

  """All values that are contained in given list."""
  manufactureDate_in: [DateTime!]

  """All values that are not contained in given list."""
  manufactureDate_not_in: [DateTime!]

  """All values less than the given value."""
  manufactureDate_lt: DateTime

  """All values less than or equal the given value."""
  manufactureDate_lte: DateTime

  """All values greater than the given value."""
  manufactureDate_gt: DateTime

  """All values greater than or equal the given value."""
  manufactureDate_gte: DateTime
  assigned: Boolean

  """All values that are not equal to given value."""
  assigned_not: Boolean
  dateAssigned: DateTime

  """All values that are not equal to given value."""
  dateAssigned_not: DateTime

  """All values that are contained in given list."""
  dateAssigned_in: [DateTime!]

  """All values that are not contained in given list."""
  dateAssigned_not_in: [DateTime!]

  """All values less than the given value."""
  dateAssigned_lt: DateTime

  """All values less than or equal the given value."""
  dateAssigned_lte: DateTime

  """All values greater than the given value."""
  dateAssigned_gt: DateTime

  """All values greater than or equal the given value."""
  dateAssigned_gte: DateTime
  owner: VehicleOwnerWhereInput
  assignee: PersonnelWhereInput
  repairs_every: RepairsRequisitionWhereInput
  repairs_some: RepairsRequisitionWhereInput
  repairs_none: RepairsRequisitionWhereInput
  service_every: RequestServiceWhereInput
  service_some: RequestServiceWhereInput
  service_none: RequestServiceWhereInput
  inspection_every: VehicleInspectionWhereInput
  inspection_some: VehicleInspectionWhereInput
  inspection_none: VehicleInspectionWhereInput
  _MagicalBackRelation_ServiceRequisitionToVehicle_every: ServiceRequisitionWhereInput
  _MagicalBackRelation_ServiceRequisitionToVehicle_some: ServiceRequisitionWhereInput
  _MagicalBackRelation_ServiceRequisitionToVehicle_none: ServiceRequisitionWhereInput
  _MagicalBackRelation_VehicleToVehicleAssignment_every: VehicleAssignmentWhereInput
  _MagicalBackRelation_VehicleToVehicleAssignment_some: VehicleAssignmentWhereInput
  _MagicalBackRelation_VehicleToVehicleAssignment_none: VehicleAssignmentWhereInput
}

input VehicleWhereUniqueInput {
  id: ID
  registrationNumber: String
  logBookNumber: String
}
